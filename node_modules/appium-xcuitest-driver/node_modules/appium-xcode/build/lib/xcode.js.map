{"version":3,"file":"xcode.js","names":["_support","require","_path","_interopRequireDefault","_asyncbox","_lodash","_teen_process","_semver","_helpers","DEFAULT_NUMBER_OF_RETRIES","XCODE_BUNDLE_ID","log","logger","getLogger","getPathFromXcodeSelect","timeout","XCRUN_TIMEOUT","generateErrorMessage","prefix","xcodePaths","findAppPaths","_","isEmpty","proposals","map","p","path","join","length","stdout","exec","e","msg","stderr","message","error","Error","developerRoot","String","replace","trim","CFBundleIdentifier","readXcodePlist","getPathFromDeveloperDir","process","env","DEVELOPER_DIR","getPath","memoize","exports","getVersionWithoutRetry","developerPath","CFBundleShortVersionString","semver","coerce","getVersionMemoized","retries","retry","getVersion","parse","version","versionString","patch","major","minor","versionFloat","parseFloat","undefined","toString","getClangVersion","fs","which","info","match","getMaxIOSSDKWithoutRetry","args","runXcrunCommand","sdkVersion","getMaxIOSSDK","getMaxTVOSSDKWithoutRetry","isNaN","getMaxTVOSSDK"],"sources":["../../lib/xcode.js"],"sourcesContent":["import { fs, logger } from '@appium/support';\nimport path from 'path';\nimport { retry } from 'asyncbox';\nimport _ from 'lodash';\nimport { exec } from 'teen_process';\nimport semver from 'semver';\nimport {\n  runXcrunCommand, findAppPaths, XCRUN_TIMEOUT, readXcodePlist\n} from './helpers';\n\nconst DEFAULT_NUMBER_OF_RETRIES = 2;\nconst XCODE_BUNDLE_ID = 'com.apple.dt.Xcode';\n\nconst log = logger.getLogger('Xcode');\n\n/**\n * Retrieves the full path to Xcode Developer subfolder via xcode-select\n *\n * @param {number} timeout The maximum timeout for xcode-select execution\n * @returns {Promise<string>} Full path to Xcode Developer subfolder\n * @throws {Error} If it is not possible to retrieve a proper path\n */\nasync function getPathFromXcodeSelect (timeout = XCRUN_TIMEOUT) {\n  /**\n   * @param {string} prefix\n   * @returns {Promise<string>}\n   */\n  const generateErrorMessage = async (prefix) => {\n    const xcodePaths = await findAppPaths(XCODE_BUNDLE_ID);\n    if (_.isEmpty(xcodePaths)) {\n      return `${prefix}. Consider installing Xcode to address this issue.`;\n    }\n\n    const proposals = xcodePaths.map((p) => `    sudo xcode-select -s \"${path.join(p, 'Contents', 'Developer')}\"`);\n    return `${prefix}. ` +\n      `Consider running${proposals.length > 1 ? ' any of' : ''}:\\n${proposals.join('\\n')}\\nto address this issue.`;\n  };\n\n  let stdout;\n  try {\n    ({stdout} = await exec('xcode-select', ['--print-path'], {timeout}));\n  } catch (e) {\n    const msg = `Cannot determine the path to Xcode by running 'xcode-select -p' command. ` +\n    `Original error: ${e.stderr || e.message}`;\n    log.error(msg);\n    throw new Error(msg);\n  }\n  // trim and remove trailing slash\n  const developerRoot = String(stdout).replace(/\\/$/, '').trim();\n  if (!developerRoot) {\n    const msg = await generateErrorMessage(`'xcode-select -p' returned an empty string`);\n    log.error(msg);\n    throw new Error(msg);\n  }\n  // xcode-select might also return a path to command line tools\n  const {CFBundleIdentifier} = await readXcodePlist(developerRoot);\n  if (CFBundleIdentifier === XCODE_BUNDLE_ID) {\n    return developerRoot;\n  }\n\n  const msg = await generateErrorMessage(`'${developerRoot}' is not a valid Xcode path`);\n  log.error(msg);\n  throw msg;\n}\n\n/**\n * Retrieves the full path to Xcode Developer subfolder via `DEVELOPER_DIR` environment variable\n *\n * @returns {Promise<string>} Full path to Xcode Developer subfolder\n * @throws {Error} If it is not possible to retrieve a proper path\n * @privateRemarks This method assumes `DEVELOPER_DIR` is defined.\n */\nasync function getPathFromDeveloperDir () {\n  const developerRoot = /** @type {string} */(process.env.DEVELOPER_DIR);\n  const {CFBundleIdentifier} = await readXcodePlist(developerRoot);\n  if (CFBundleIdentifier === XCODE_BUNDLE_ID) {\n    return developerRoot;\n  }\n\n  const msg = `The path to Xcode Developer dir '${developerRoot}' provided in DEVELOPER_DIR ` +\n  `environment variable is not a valid path`;\n  log.error(msg);\n  throw new Error(msg);\n}\n\n/**\n * Retrieves the full path to Xcode Developer subfolder.\n * If `DEVELOPER_DIR` environment variable is provided then its value has a priority.\n * @param {number} timeout The maximum timeout for xcode-select execution\n * @returns {Promise<string>} Full path to Xcode Developer subfolder timeout\n * @throws {Error} If there was an error while retrieving the path.\n */\nconst getPath = _.memoize(\n  /**\n   * @param {number} timeout\n   * @returns {Promise<string>}\n   */\n  (timeout = XCRUN_TIMEOUT) => process.env.DEVELOPER_DIR ? getPathFromDeveloperDir() : getPathFromXcodeSelect(timeout));\n\n/**\n * Retrieves Xcode version\n *\n * @param {number} timeout [15000] Timeout of milliseconds to wait for terminal commands.\n * @returns {Promise<import(\"semver\").SemVer | null>} Xcode version\n * @throws {Error} If there was a failure while retrieving the version\n */\nasync function getVersionWithoutRetry (timeout = XCRUN_TIMEOUT) {\n  const developerPath = await getPath(timeout);\n  // we want to read the CFBundleShortVersionString from Xcode's plist.\n  const {CFBundleShortVersionString} = await readXcodePlist(developerPath);\n  return semver.coerce(CFBundleShortVersionString);\n}\n\n/**\n * Retrieves Xcode version or the cached one if called more than once\n *\n * @param {number} retries  How many retries to apply for version retrieval\n * @param {number} timeout Timeout of milliseconds to wait for terminal commands\n * @returns {Promise<import(\"semver\").SemVer | null>} Xcode version\n * @throws {Error} If there was a failure while retrieving the version\n */\nconst getVersionMemoized = _.memoize(\n  function getVersionMemoized (retries = DEFAULT_NUMBER_OF_RETRIES, timeout = XCRUN_TIMEOUT) {\n    return retry(retries, getVersionWithoutRetry, timeout);\n  }\n);\n\n/**\n * @typedef {Object} XcodeVersion\n * @property {string} versionString Xcode version as a string\n * @property {number} versionFloat Xcode version as a float number\n * @property {number} major Major number of Xcode version\n * @property {number} minor Minor number of Xcode version\n * @property {number} [patch] Patch number of Xcode version (if exists)\n * @property {() => string} toString Returns Xcode version as a string\n */\n\n/**\n * Retrieves Xcode version\n *\n * @param {boolean} parse [false] Whether to parse the version to a XcodeVersion version\n * @param {number} retries [2] How many retries to apply for getting the version number\n * @param {number} timeout [15000] Timeout of milliseconds to wait for terminal commands\n * @returns {Promise<XcodeVersion | string>} Xcode version depending on the value of `parse` flag\n * @throws {Error} If there was a failure while retrieving the version\n */\nasync function getVersion (parse = false, retries = DEFAULT_NUMBER_OF_RETRIES, timeout = XCRUN_TIMEOUT) {\n  const version = /** @type {import('semver').SemVer} */(await getVersionMemoized(retries, timeout));\n  // xcode version strings are not exactly semver string: patch versions of 0\n  // are removed (e.g., '10.0.0' => '10.0')\n  const versionString = version.patch > 0 ? version.version : `${version.major}.${version.minor}`;\n  if (!parse) {\n    return versionString;\n  }\n\n  return {\n    versionString,\n    versionFloat: parseFloat(versionString),\n    major: version.major,\n    minor: version.minor,\n    patch: version.patch > 0 ? version.patch : undefined,\n    toString () {\n      return versionString;\n    },\n  };\n}\n\n/**\n * Check https://trac.macports.org/wiki/XcodeVersionInfo\n * to see the actual mapping between clang and other components.\n *\n * @returns {Promise<string|null>} The actual Clang version in x.x.x.x or x.x.x format,\n * which is supplied with Command Line Tools. `null` is returned\n * if CLT are not installed.\n */\nasync function getClangVersion () {\n  try {\n    await fs.which('clang');\n  } catch (e) {\n    log.info('Cannot find clang executable on the local system. ' +\n      'Are Xcode Command Line Tools installed?');\n    return null;\n  }\n  const {stdout} = await exec('clang', ['--version']);\n  const match = /clang-([0-9.]+)/.exec(stdout);\n  if (!match) {\n    log.info(`Cannot parse clang version from ${stdout}`);\n    return null;\n  }\n  return match[1];\n}\n\n/**\n * Retrieves the maximum version of iOS SDK supported by the installed Xcode\n *\n * @param {number} timeout [15000] Timeout of milliseconds to wait for terminal commands\n * @returns {Promise<string>} The SDK version\n * @throws {Error} If the SDK version number cannot be determined\n */\nasync function getMaxIOSSDKWithoutRetry (timeout = XCRUN_TIMEOUT) {\n  const args = ['--sdk', 'iphonesimulator', '--show-sdk-version'];\n  const {stdout} = await runXcrunCommand(args, timeout);\n  const sdkVersion = stdout.trim();\n  const match = /\\d.\\d/.exec(stdout);\n  if (!match) {\n    throw new Error(`xcrun returned a non-numeric iOS SDK version: '${sdkVersion}'`);\n  }\n  return sdkVersion;\n}\n\n/**\n * Retrieves the maximum version of iOS SDK supported by the installed Xcode\n *\n * @param {number} timeout Timeout of milliseconds to wait for terminal commands\n * @param {number} retries The maximum number of retries\n * @returns {string} The SDK version\n * @throws {Error} If the SDK version number cannot be determined\n */\nconst getMaxIOSSDK = _.memoize(\n  function getMaxIOSSDK (retries = DEFAULT_NUMBER_OF_RETRIES, timeout = XCRUN_TIMEOUT) {\n    return retry(retries, getMaxIOSSDKWithoutRetry, timeout);\n  }\n);\n\n/**\n * Retrieves the maximum version of tvOS SDK supported by the installed Xcode\n *\n * @param {number} timeout Timeout of milliseconds to wait for terminal commands\n * @returns {Promise<string>} The SDK version\n * @throws {Error} If the SDK version number cannot be determined\n */\nasync function getMaxTVOSSDKWithoutRetry (timeout = XCRUN_TIMEOUT) {\n  const args = ['--sdk', 'appletvsimulator', '--show-sdk-version'];\n  const {stdout} = await runXcrunCommand(args, timeout);\n  const sdkVersion = stdout.trim();\n  if (isNaN(parseFloat(sdkVersion))) {\n    throw new Error(`xcrun returned a non-numeric tvOS SDK version: '${sdkVersion}'`);\n  }\n  return sdkVersion;\n}\n\n/**\n * Retrieves the maximum version of tvOS SDK supported by the installed Xcode\n *\n * @throws {Error} If the SDK version number cannot be determined\n */\nconst getMaxTVOSSDK = _.memoize(\n  /**\n   * @param {number} timeout Timeout of milliseconds to wait for terminal commands\n   * @param {number} retries The maximum number of retries\n   * @returns {Promise<string>} The SDK version\n   */\n  async function getMaxTVOSSDK (retries = DEFAULT_NUMBER_OF_RETRIES, timeout = XCRUN_TIMEOUT) {\n    return /** @type {string} */(await retry(retries, getMaxTVOSSDKWithoutRetry, timeout));\n  }\n);\n\nexport {\n  getPath, getVersion, getMaxIOSSDK, getMaxIOSSDKWithoutRetry,\n  getMaxTVOSSDK, getMaxTVOSSDKWithoutRetry, getClangVersion,\n  getPathFromDeveloperDir, getPathFromXcodeSelect,\n};\n"],"mappings":"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"}