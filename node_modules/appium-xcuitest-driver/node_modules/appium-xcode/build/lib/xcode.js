"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getClangVersion = getClangVersion;
exports.getMaxIOSSDK = void 0;
exports.getMaxIOSSDKWithoutRetry = getMaxIOSSDKWithoutRetry;
exports.getMaxTVOSSDK = void 0;
exports.getMaxTVOSSDKWithoutRetry = getMaxTVOSSDKWithoutRetry;
exports.getPath = void 0;
exports.getPathFromDeveloperDir = getPathFromDeveloperDir;
exports.getPathFromXcodeSelect = getPathFromXcodeSelect;
exports.getVersion = getVersion;
require("source-map-support/register");
var _support = require("@appium/support");
var _path = _interopRequireDefault(require("path"));
var _asyncbox = require("asyncbox");
var _lodash = _interopRequireDefault(require("lodash"));
var _teen_process = require("teen_process");
var _semver = _interopRequireDefault(require("semver"));
var _helpers = require("./helpers");
const DEFAULT_NUMBER_OF_RETRIES = 2;
const XCODE_BUNDLE_ID = 'com.apple.dt.Xcode';
const log = _support.logger.getLogger('Xcode');
async function getPathFromXcodeSelect(timeout = _helpers.XCRUN_TIMEOUT) {
  const generateErrorMessage = async prefix => {
    const xcodePaths = await (0, _helpers.findAppPaths)(XCODE_BUNDLE_ID);
    if (_lodash.default.isEmpty(xcodePaths)) {
      return `${prefix}. Consider installing Xcode to address this issue.`;
    }
    const proposals = xcodePaths.map(p => `    sudo xcode-select -s "${_path.default.join(p, 'Contents', 'Developer')}"`);
    return `${prefix}. ` + `Consider running${proposals.length > 1 ? ' any of' : ''}:\n${proposals.join('\n')}\nto address this issue.`;
  };
  let stdout;
  try {
    ({
      stdout
    } = await (0, _teen_process.exec)('xcode-select', ['--print-path'], {
      timeout
    }));
  } catch (e) {
    const msg = `Cannot determine the path to Xcode by running 'xcode-select -p' command. ` + `Original error: ${e.stderr || e.message}`;
    log.error(msg);
    throw new Error(msg);
  }
  const developerRoot = String(stdout).replace(/\/$/, '').trim();
  if (!developerRoot) {
    const msg = await generateErrorMessage(`'xcode-select -p' returned an empty string`);
    log.error(msg);
    throw new Error(msg);
  }
  const {
    CFBundleIdentifier
  } = await (0, _helpers.readXcodePlist)(developerRoot);
  if (CFBundleIdentifier === XCODE_BUNDLE_ID) {
    return developerRoot;
  }
  const msg = await generateErrorMessage(`'${developerRoot}' is not a valid Xcode path`);
  log.error(msg);
  throw msg;
}
async function getPathFromDeveloperDir() {
  const developerRoot = process.env.DEVELOPER_DIR;
  const {
    CFBundleIdentifier
  } = await (0, _helpers.readXcodePlist)(developerRoot);
  if (CFBundleIdentifier === XCODE_BUNDLE_ID) {
    return developerRoot;
  }
  const msg = `The path to Xcode Developer dir '${developerRoot}' provided in DEVELOPER_DIR ` + `environment variable is not a valid path`;
  log.error(msg);
  throw new Error(msg);
}
const getPath = _lodash.default.memoize((timeout = _helpers.XCRUN_TIMEOUT) => process.env.DEVELOPER_DIR ? getPathFromDeveloperDir() : getPathFromXcodeSelect(timeout));
exports.getPath = getPath;
async function getVersionWithoutRetry(timeout = _helpers.XCRUN_TIMEOUT) {
  const developerPath = await getPath(timeout);
  const {
    CFBundleShortVersionString
  } = await (0, _helpers.readXcodePlist)(developerPath);
  return _semver.default.coerce(CFBundleShortVersionString);
}
const getVersionMemoized = _lodash.default.memoize(function getVersionMemoized(retries = DEFAULT_NUMBER_OF_RETRIES, timeout = _helpers.XCRUN_TIMEOUT) {
  return (0, _asyncbox.retry)(retries, getVersionWithoutRetry, timeout);
});
async function getVersion(parse = false, retries = DEFAULT_NUMBER_OF_RETRIES, timeout = _helpers.XCRUN_TIMEOUT) {
  const version = await getVersionMemoized(retries, timeout);
  const versionString = version.patch > 0 ? version.version : `${version.major}.${version.minor}`;
  if (!parse) {
    return versionString;
  }
  return {
    versionString,
    versionFloat: parseFloat(versionString),
    major: version.major,
    minor: version.minor,
    patch: version.patch > 0 ? version.patch : undefined,
    toString() {
      return versionString;
    }
  };
}
async function getClangVersion() {
  try {
    await _support.fs.which('clang');
  } catch (e) {
    log.info('Cannot find clang executable on the local system. ' + 'Are Xcode Command Line Tools installed?');
    return null;
  }
  const {
    stdout
  } = await (0, _teen_process.exec)('clang', ['--version']);
  const match = /clang-([0-9.]+)/.exec(stdout);
  if (!match) {
    log.info(`Cannot parse clang version from ${stdout}`);
    return null;
  }
  return match[1];
}
async function getMaxIOSSDKWithoutRetry(timeout = _helpers.XCRUN_TIMEOUT) {
  const args = ['--sdk', 'iphonesimulator', '--show-sdk-version'];
  const {
    stdout
  } = await (0, _helpers.runXcrunCommand)(args, timeout);
  const sdkVersion = stdout.trim();
  const match = /\d.\d/.exec(stdout);
  if (!match) {
    throw new Error(`xcrun returned a non-numeric iOS SDK version: '${sdkVersion}'`);
  }
  return sdkVersion;
}
const getMaxIOSSDK = _lodash.default.memoize(function getMaxIOSSDK(retries = DEFAULT_NUMBER_OF_RETRIES, timeout = _helpers.XCRUN_TIMEOUT) {
  return (0, _asyncbox.retry)(retries, getMaxIOSSDKWithoutRetry, timeout);
});
exports.getMaxIOSSDK = getMaxIOSSDK;
async function getMaxTVOSSDKWithoutRetry(timeout = _helpers.XCRUN_TIMEOUT) {
  const args = ['--sdk', 'appletvsimulator', '--show-sdk-version'];
  const {
    stdout
  } = await (0, _helpers.runXcrunCommand)(args, timeout);
  const sdkVersion = stdout.trim();
  if (isNaN(parseFloat(sdkVersion))) {
    throw new Error(`xcrun returned a non-numeric tvOS SDK version: '${sdkVersion}'`);
  }
  return sdkVersion;
}
const getMaxTVOSSDK = _lodash.default.memoize(async function getMaxTVOSSDK(retries = DEFAULT_NUMBER_OF_RETRIES, timeout = _helpers.XCRUN_TIMEOUT) {
  return await (0, _asyncbox.retry)(retries, getMaxTVOSSDKWithoutRetry, timeout);
});
exports.getMaxTVOSSDK = getMaxTVOSSDK;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfc3VwcG9ydCIsInJlcXVpcmUiLCJfcGF0aCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfYXN5bmNib3giLCJfbG9kYXNoIiwiX3RlZW5fcHJvY2VzcyIsIl9zZW12ZXIiLCJfaGVscGVycyIsIkRFRkFVTFRfTlVNQkVSX09GX1JFVFJJRVMiLCJYQ09ERV9CVU5ETEVfSUQiLCJsb2ciLCJsb2dnZXIiLCJnZXRMb2dnZXIiLCJnZXRQYXRoRnJvbVhjb2RlU2VsZWN0IiwidGltZW91dCIsIlhDUlVOX1RJTUVPVVQiLCJnZW5lcmF0ZUVycm9yTWVzc2FnZSIsInByZWZpeCIsInhjb2RlUGF0aHMiLCJmaW5kQXBwUGF0aHMiLCJfIiwiaXNFbXB0eSIsInByb3Bvc2FscyIsIm1hcCIsInAiLCJwYXRoIiwiam9pbiIsImxlbmd0aCIsInN0ZG91dCIsImV4ZWMiLCJlIiwibXNnIiwic3RkZXJyIiwibWVzc2FnZSIsImVycm9yIiwiRXJyb3IiLCJkZXZlbG9wZXJSb290IiwiU3RyaW5nIiwicmVwbGFjZSIsInRyaW0iLCJDRkJ1bmRsZUlkZW50aWZpZXIiLCJyZWFkWGNvZGVQbGlzdCIsImdldFBhdGhGcm9tRGV2ZWxvcGVyRGlyIiwicHJvY2VzcyIsImVudiIsIkRFVkVMT1BFUl9ESVIiLCJnZXRQYXRoIiwibWVtb2l6ZSIsImV4cG9ydHMiLCJnZXRWZXJzaW9uV2l0aG91dFJldHJ5IiwiZGV2ZWxvcGVyUGF0aCIsIkNGQnVuZGxlU2hvcnRWZXJzaW9uU3RyaW5nIiwic2VtdmVyIiwiY29lcmNlIiwiZ2V0VmVyc2lvbk1lbW9pemVkIiwicmV0cmllcyIsInJldHJ5IiwiZ2V0VmVyc2lvbiIsInBhcnNlIiwidmVyc2lvbiIsInZlcnNpb25TdHJpbmciLCJwYXRjaCIsIm1ham9yIiwibWlub3IiLCJ2ZXJzaW9uRmxvYXQiLCJwYXJzZUZsb2F0IiwidW5kZWZpbmVkIiwidG9TdHJpbmciLCJnZXRDbGFuZ1ZlcnNpb24iLCJmcyIsIndoaWNoIiwiaW5mbyIsIm1hdGNoIiwiZ2V0TWF4SU9TU0RLV2l0aG91dFJldHJ5IiwiYXJncyIsInJ1blhjcnVuQ29tbWFuZCIsInNka1ZlcnNpb24iLCJnZXRNYXhJT1NTREsiLCJnZXRNYXhUVk9TU0RLV2l0aG91dFJldHJ5IiwiaXNOYU4iLCJnZXRNYXhUVk9TU0RLIl0sInNvdXJjZXMiOlsiLi4vLi4vbGliL3hjb2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZzLCBsb2dnZXIgfSBmcm9tICdAYXBwaXVtL3N1cHBvcnQnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyByZXRyeSB9IGZyb20gJ2FzeW5jYm94JztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBleGVjIH0gZnJvbSAndGVlbl9wcm9jZXNzJztcbmltcG9ydCBzZW12ZXIgZnJvbSAnc2VtdmVyJztcbmltcG9ydCB7XG4gIHJ1blhjcnVuQ29tbWFuZCwgZmluZEFwcFBhdGhzLCBYQ1JVTl9USU1FT1VULCByZWFkWGNvZGVQbGlzdFxufSBmcm9tICcuL2hlbHBlcnMnO1xuXG5jb25zdCBERUZBVUxUX05VTUJFUl9PRl9SRVRSSUVTID0gMjtcbmNvbnN0IFhDT0RFX0JVTkRMRV9JRCA9ICdjb20uYXBwbGUuZHQuWGNvZGUnO1xuXG5jb25zdCBsb2cgPSBsb2dnZXIuZ2V0TG9nZ2VyKCdYY29kZScpO1xuXG4vKipcbiAqIFJldHJpZXZlcyB0aGUgZnVsbCBwYXRoIHRvIFhjb2RlIERldmVsb3BlciBzdWJmb2xkZXIgdmlhIHhjb2RlLXNlbGVjdFxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lb3V0IFRoZSBtYXhpbXVtIHRpbWVvdXQgZm9yIHhjb2RlLXNlbGVjdCBleGVjdXRpb25cbiAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59IEZ1bGwgcGF0aCB0byBYY29kZSBEZXZlbG9wZXIgc3ViZm9sZGVyXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgaXQgaXMgbm90IHBvc3NpYmxlIHRvIHJldHJpZXZlIGEgcHJvcGVyIHBhdGhcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0UGF0aEZyb21YY29kZVNlbGVjdCAodGltZW91dCA9IFhDUlVOX1RJTUVPVVQpIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwcmVmaXhcbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn1cbiAgICovXG4gIGNvbnN0IGdlbmVyYXRlRXJyb3JNZXNzYWdlID0gYXN5bmMgKHByZWZpeCkgPT4ge1xuICAgIGNvbnN0IHhjb2RlUGF0aHMgPSBhd2FpdCBmaW5kQXBwUGF0aHMoWENPREVfQlVORExFX0lEKTtcbiAgICBpZiAoXy5pc0VtcHR5KHhjb2RlUGF0aHMpKSB7XG4gICAgICByZXR1cm4gYCR7cHJlZml4fS4gQ29uc2lkZXIgaW5zdGFsbGluZyBYY29kZSB0byBhZGRyZXNzIHRoaXMgaXNzdWUuYDtcbiAgICB9XG5cbiAgICBjb25zdCBwcm9wb3NhbHMgPSB4Y29kZVBhdGhzLm1hcCgocCkgPT4gYCAgICBzdWRvIHhjb2RlLXNlbGVjdCAtcyBcIiR7cGF0aC5qb2luKHAsICdDb250ZW50cycsICdEZXZlbG9wZXInKX1cImApO1xuICAgIHJldHVybiBgJHtwcmVmaXh9LiBgICtcbiAgICAgIGBDb25zaWRlciBydW5uaW5nJHtwcm9wb3NhbHMubGVuZ3RoID4gMSA/ICcgYW55IG9mJyA6ICcnfTpcXG4ke3Byb3Bvc2Fscy5qb2luKCdcXG4nKX1cXG50byBhZGRyZXNzIHRoaXMgaXNzdWUuYDtcbiAgfTtcblxuICBsZXQgc3Rkb3V0O1xuICB0cnkge1xuICAgICh7c3Rkb3V0fSA9IGF3YWl0IGV4ZWMoJ3hjb2RlLXNlbGVjdCcsIFsnLS1wcmludC1wYXRoJ10sIHt0aW1lb3V0fSkpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc3QgbXNnID0gYENhbm5vdCBkZXRlcm1pbmUgdGhlIHBhdGggdG8gWGNvZGUgYnkgcnVubmluZyAneGNvZGUtc2VsZWN0IC1wJyBjb21tYW5kLiBgICtcbiAgICBgT3JpZ2luYWwgZXJyb3I6ICR7ZS5zdGRlcnIgfHwgZS5tZXNzYWdlfWA7XG4gICAgbG9nLmVycm9yKG1zZyk7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gIH1cbiAgLy8gdHJpbSBhbmQgcmVtb3ZlIHRyYWlsaW5nIHNsYXNoXG4gIGNvbnN0IGRldmVsb3BlclJvb3QgPSBTdHJpbmcoc3Rkb3V0KS5yZXBsYWNlKC9cXC8kLywgJycpLnRyaW0oKTtcbiAgaWYgKCFkZXZlbG9wZXJSb290KSB7XG4gICAgY29uc3QgbXNnID0gYXdhaXQgZ2VuZXJhdGVFcnJvck1lc3NhZ2UoYCd4Y29kZS1zZWxlY3QgLXAnIHJldHVybmVkIGFuIGVtcHR5IHN0cmluZ2ApO1xuICAgIGxvZy5lcnJvcihtc2cpO1xuICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICB9XG4gIC8vIHhjb2RlLXNlbGVjdCBtaWdodCBhbHNvIHJldHVybiBhIHBhdGggdG8gY29tbWFuZCBsaW5lIHRvb2xzXG4gIGNvbnN0IHtDRkJ1bmRsZUlkZW50aWZpZXJ9ID0gYXdhaXQgcmVhZFhjb2RlUGxpc3QoZGV2ZWxvcGVyUm9vdCk7XG4gIGlmIChDRkJ1bmRsZUlkZW50aWZpZXIgPT09IFhDT0RFX0JVTkRMRV9JRCkge1xuICAgIHJldHVybiBkZXZlbG9wZXJSb290O1xuICB9XG5cbiAgY29uc3QgbXNnID0gYXdhaXQgZ2VuZXJhdGVFcnJvck1lc3NhZ2UoYCcke2RldmVsb3BlclJvb3R9JyBpcyBub3QgYSB2YWxpZCBYY29kZSBwYXRoYCk7XG4gIGxvZy5lcnJvcihtc2cpO1xuICB0aHJvdyBtc2c7XG59XG5cbi8qKlxuICogUmV0cmlldmVzIHRoZSBmdWxsIHBhdGggdG8gWGNvZGUgRGV2ZWxvcGVyIHN1YmZvbGRlciB2aWEgYERFVkVMT1BFUl9ESVJgIGVudmlyb25tZW50IHZhcmlhYmxlXG4gKlxuICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn0gRnVsbCBwYXRoIHRvIFhjb2RlIERldmVsb3BlciBzdWJmb2xkZXJcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBpdCBpcyBub3QgcG9zc2libGUgdG8gcmV0cmlldmUgYSBwcm9wZXIgcGF0aFxuICogQHByaXZhdGVSZW1hcmtzIFRoaXMgbWV0aG9kIGFzc3VtZXMgYERFVkVMT1BFUl9ESVJgIGlzIGRlZmluZWQuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGdldFBhdGhGcm9tRGV2ZWxvcGVyRGlyICgpIHtcbiAgY29uc3QgZGV2ZWxvcGVyUm9vdCA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyhwcm9jZXNzLmVudi5ERVZFTE9QRVJfRElSKTtcbiAgY29uc3Qge0NGQnVuZGxlSWRlbnRpZmllcn0gPSBhd2FpdCByZWFkWGNvZGVQbGlzdChkZXZlbG9wZXJSb290KTtcbiAgaWYgKENGQnVuZGxlSWRlbnRpZmllciA9PT0gWENPREVfQlVORExFX0lEKSB7XG4gICAgcmV0dXJuIGRldmVsb3BlclJvb3Q7XG4gIH1cblxuICBjb25zdCBtc2cgPSBgVGhlIHBhdGggdG8gWGNvZGUgRGV2ZWxvcGVyIGRpciAnJHtkZXZlbG9wZXJSb290fScgcHJvdmlkZWQgaW4gREVWRUxPUEVSX0RJUiBgICtcbiAgYGVudmlyb25tZW50IHZhcmlhYmxlIGlzIG5vdCBhIHZhbGlkIHBhdGhgO1xuICBsb2cuZXJyb3IobXNnKTtcbiAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG59XG5cbi8qKlxuICogUmV0cmlldmVzIHRoZSBmdWxsIHBhdGggdG8gWGNvZGUgRGV2ZWxvcGVyIHN1YmZvbGRlci5cbiAqIElmIGBERVZFTE9QRVJfRElSYCBlbnZpcm9ubWVudCB2YXJpYWJsZSBpcyBwcm92aWRlZCB0aGVuIGl0cyB2YWx1ZSBoYXMgYSBwcmlvcml0eS5cbiAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lb3V0IFRoZSBtYXhpbXVtIHRpbWVvdXQgZm9yIHhjb2RlLXNlbGVjdCBleGVjdXRpb25cbiAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59IEZ1bGwgcGF0aCB0byBYY29kZSBEZXZlbG9wZXIgc3ViZm9sZGVyIHRpbWVvdXRcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGVyZSB3YXMgYW4gZXJyb3Igd2hpbGUgcmV0cmlldmluZyB0aGUgcGF0aC5cbiAqL1xuY29uc3QgZ2V0UGF0aCA9IF8ubWVtb2l6ZShcbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lb3V0XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59XG4gICAqL1xuICAodGltZW91dCA9IFhDUlVOX1RJTUVPVVQpID0+IHByb2Nlc3MuZW52LkRFVkVMT1BFUl9ESVIgPyBnZXRQYXRoRnJvbURldmVsb3BlckRpcigpIDogZ2V0UGF0aEZyb21YY29kZVNlbGVjdCh0aW1lb3V0KSk7XG5cbi8qKlxuICogUmV0cmlldmVzIFhjb2RlIHZlcnNpb25cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gdGltZW91dCBbMTUwMDBdIFRpbWVvdXQgb2YgbWlsbGlzZWNvbmRzIHRvIHdhaXQgZm9yIHRlcm1pbmFsIGNvbW1hbmRzLlxuICogQHJldHVybnMge1Byb21pc2U8aW1wb3J0KFwic2VtdmVyXCIpLlNlbVZlciB8IG51bGw+fSBYY29kZSB2ZXJzaW9uXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlcmUgd2FzIGEgZmFpbHVyZSB3aGlsZSByZXRyaWV2aW5nIHRoZSB2ZXJzaW9uXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGdldFZlcnNpb25XaXRob3V0UmV0cnkgKHRpbWVvdXQgPSBYQ1JVTl9USU1FT1VUKSB7XG4gIGNvbnN0IGRldmVsb3BlclBhdGggPSBhd2FpdCBnZXRQYXRoKHRpbWVvdXQpO1xuICAvLyB3ZSB3YW50IHRvIHJlYWQgdGhlIENGQnVuZGxlU2hvcnRWZXJzaW9uU3RyaW5nIGZyb20gWGNvZGUncyBwbGlzdC5cbiAgY29uc3Qge0NGQnVuZGxlU2hvcnRWZXJzaW9uU3RyaW5nfSA9IGF3YWl0IHJlYWRYY29kZVBsaXN0KGRldmVsb3BlclBhdGgpO1xuICByZXR1cm4gc2VtdmVyLmNvZXJjZShDRkJ1bmRsZVNob3J0VmVyc2lvblN0cmluZyk7XG59XG5cbi8qKlxuICogUmV0cmlldmVzIFhjb2RlIHZlcnNpb24gb3IgdGhlIGNhY2hlZCBvbmUgaWYgY2FsbGVkIG1vcmUgdGhhbiBvbmNlXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHJldHJpZXMgIEhvdyBtYW55IHJldHJpZXMgdG8gYXBwbHkgZm9yIHZlcnNpb24gcmV0cmlldmFsXG4gKiBAcGFyYW0ge251bWJlcn0gdGltZW91dCBUaW1lb3V0IG9mIG1pbGxpc2Vjb25kcyB0byB3YWl0IGZvciB0ZXJtaW5hbCBjb21tYW5kc1xuICogQHJldHVybnMge1Byb21pc2U8aW1wb3J0KFwic2VtdmVyXCIpLlNlbVZlciB8IG51bGw+fSBYY29kZSB2ZXJzaW9uXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlcmUgd2FzIGEgZmFpbHVyZSB3aGlsZSByZXRyaWV2aW5nIHRoZSB2ZXJzaW9uXG4gKi9cbmNvbnN0IGdldFZlcnNpb25NZW1vaXplZCA9IF8ubWVtb2l6ZShcbiAgZnVuY3Rpb24gZ2V0VmVyc2lvbk1lbW9pemVkIChyZXRyaWVzID0gREVGQVVMVF9OVU1CRVJfT0ZfUkVUUklFUywgdGltZW91dCA9IFhDUlVOX1RJTUVPVVQpIHtcbiAgICByZXR1cm4gcmV0cnkocmV0cmllcywgZ2V0VmVyc2lvbldpdGhvdXRSZXRyeSwgdGltZW91dCk7XG4gIH1cbik7XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gWGNvZGVWZXJzaW9uXG4gKiBAcHJvcGVydHkge3N0cmluZ30gdmVyc2lvblN0cmluZyBYY29kZSB2ZXJzaW9uIGFzIGEgc3RyaW5nXG4gKiBAcHJvcGVydHkge251bWJlcn0gdmVyc2lvbkZsb2F0IFhjb2RlIHZlcnNpb24gYXMgYSBmbG9hdCBudW1iZXJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBtYWpvciBNYWpvciBudW1iZXIgb2YgWGNvZGUgdmVyc2lvblxuICogQHByb3BlcnR5IHtudW1iZXJ9IG1pbm9yIE1pbm9yIG51bWJlciBvZiBYY29kZSB2ZXJzaW9uXG4gKiBAcHJvcGVydHkge251bWJlcn0gW3BhdGNoXSBQYXRjaCBudW1iZXIgb2YgWGNvZGUgdmVyc2lvbiAoaWYgZXhpc3RzKVxuICogQHByb3BlcnR5IHsoKSA9PiBzdHJpbmd9IHRvU3RyaW5nIFJldHVybnMgWGNvZGUgdmVyc2lvbiBhcyBhIHN0cmluZ1xuICovXG5cbi8qKlxuICogUmV0cmlldmVzIFhjb2RlIHZlcnNpb25cbiAqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHBhcnNlIFtmYWxzZV0gV2hldGhlciB0byBwYXJzZSB0aGUgdmVyc2lvbiB0byBhIFhjb2RlVmVyc2lvbiB2ZXJzaW9uXG4gKiBAcGFyYW0ge251bWJlcn0gcmV0cmllcyBbMl0gSG93IG1hbnkgcmV0cmllcyB0byBhcHBseSBmb3IgZ2V0dGluZyB0aGUgdmVyc2lvbiBudW1iZXJcbiAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lb3V0IFsxNTAwMF0gVGltZW91dCBvZiBtaWxsaXNlY29uZHMgdG8gd2FpdCBmb3IgdGVybWluYWwgY29tbWFuZHNcbiAqIEByZXR1cm5zIHtQcm9taXNlPFhjb2RlVmVyc2lvbiB8IHN0cmluZz59IFhjb2RlIHZlcnNpb24gZGVwZW5kaW5nIG9uIHRoZSB2YWx1ZSBvZiBgcGFyc2VgIGZsYWdcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGVyZSB3YXMgYSBmYWlsdXJlIHdoaWxlIHJldHJpZXZpbmcgdGhlIHZlcnNpb25cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0VmVyc2lvbiAocGFyc2UgPSBmYWxzZSwgcmV0cmllcyA9IERFRkFVTFRfTlVNQkVSX09GX1JFVFJJRVMsIHRpbWVvdXQgPSBYQ1JVTl9USU1FT1VUKSB7XG4gIGNvbnN0IHZlcnNpb24gPSAvKiogQHR5cGUge2ltcG9ydCgnc2VtdmVyJykuU2VtVmVyfSAqLyhhd2FpdCBnZXRWZXJzaW9uTWVtb2l6ZWQocmV0cmllcywgdGltZW91dCkpO1xuICAvLyB4Y29kZSB2ZXJzaW9uIHN0cmluZ3MgYXJlIG5vdCBleGFjdGx5IHNlbXZlciBzdHJpbmc6IHBhdGNoIHZlcnNpb25zIG9mIDBcbiAgLy8gYXJlIHJlbW92ZWQgKGUuZy4sICcxMC4wLjAnID0+ICcxMC4wJylcbiAgY29uc3QgdmVyc2lvblN0cmluZyA9IHZlcnNpb24ucGF0Y2ggPiAwID8gdmVyc2lvbi52ZXJzaW9uIDogYCR7dmVyc2lvbi5tYWpvcn0uJHt2ZXJzaW9uLm1pbm9yfWA7XG4gIGlmICghcGFyc2UpIHtcbiAgICByZXR1cm4gdmVyc2lvblN0cmluZztcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdmVyc2lvblN0cmluZyxcbiAgICB2ZXJzaW9uRmxvYXQ6IHBhcnNlRmxvYXQodmVyc2lvblN0cmluZyksXG4gICAgbWFqb3I6IHZlcnNpb24ubWFqb3IsXG4gICAgbWlub3I6IHZlcnNpb24ubWlub3IsXG4gICAgcGF0Y2g6IHZlcnNpb24ucGF0Y2ggPiAwID8gdmVyc2lvbi5wYXRjaCA6IHVuZGVmaW5lZCxcbiAgICB0b1N0cmluZyAoKSB7XG4gICAgICByZXR1cm4gdmVyc2lvblN0cmluZztcbiAgICB9LFxuICB9O1xufVxuXG4vKipcbiAqIENoZWNrIGh0dHBzOi8vdHJhYy5tYWNwb3J0cy5vcmcvd2lraS9YY29kZVZlcnNpb25JbmZvXG4gKiB0byBzZWUgdGhlIGFjdHVhbCBtYXBwaW5nIGJldHdlZW4gY2xhbmcgYW5kIG90aGVyIGNvbXBvbmVudHMuXG4gKlxuICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nfG51bGw+fSBUaGUgYWN0dWFsIENsYW5nIHZlcnNpb24gaW4geC54LngueCBvciB4LngueCBmb3JtYXQsXG4gKiB3aGljaCBpcyBzdXBwbGllZCB3aXRoIENvbW1hbmQgTGluZSBUb29scy4gYG51bGxgIGlzIHJldHVybmVkXG4gKiBpZiBDTFQgYXJlIG5vdCBpbnN0YWxsZWQuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGdldENsYW5nVmVyc2lvbiAoKSB7XG4gIHRyeSB7XG4gICAgYXdhaXQgZnMud2hpY2goJ2NsYW5nJyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBsb2cuaW5mbygnQ2Fubm90IGZpbmQgY2xhbmcgZXhlY3V0YWJsZSBvbiB0aGUgbG9jYWwgc3lzdGVtLiAnICtcbiAgICAgICdBcmUgWGNvZGUgQ29tbWFuZCBMaW5lIFRvb2xzIGluc3RhbGxlZD8nKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCB7c3Rkb3V0fSA9IGF3YWl0IGV4ZWMoJ2NsYW5nJywgWyctLXZlcnNpb24nXSk7XG4gIGNvbnN0IG1hdGNoID0gL2NsYW5nLShbMC05Ll0rKS8uZXhlYyhzdGRvdXQpO1xuICBpZiAoIW1hdGNoKSB7XG4gICAgbG9nLmluZm8oYENhbm5vdCBwYXJzZSBjbGFuZyB2ZXJzaW9uIGZyb20gJHtzdGRvdXR9YCk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIG1hdGNoWzFdO1xufVxuXG4vKipcbiAqIFJldHJpZXZlcyB0aGUgbWF4aW11bSB2ZXJzaW9uIG9mIGlPUyBTREsgc3VwcG9ydGVkIGJ5IHRoZSBpbnN0YWxsZWQgWGNvZGVcbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gdGltZW91dCBbMTUwMDBdIFRpbWVvdXQgb2YgbWlsbGlzZWNvbmRzIHRvIHdhaXQgZm9yIHRlcm1pbmFsIGNvbW1hbmRzXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fSBUaGUgU0RLIHZlcnNpb25cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgU0RLIHZlcnNpb24gbnVtYmVyIGNhbm5vdCBiZSBkZXRlcm1pbmVkXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGdldE1heElPU1NES1dpdGhvdXRSZXRyeSAodGltZW91dCA9IFhDUlVOX1RJTUVPVVQpIHtcbiAgY29uc3QgYXJncyA9IFsnLS1zZGsnLCAnaXBob25lc2ltdWxhdG9yJywgJy0tc2hvdy1zZGstdmVyc2lvbiddO1xuICBjb25zdCB7c3Rkb3V0fSA9IGF3YWl0IHJ1blhjcnVuQ29tbWFuZChhcmdzLCB0aW1lb3V0KTtcbiAgY29uc3Qgc2RrVmVyc2lvbiA9IHN0ZG91dC50cmltKCk7XG4gIGNvbnN0IG1hdGNoID0gL1xcZC5cXGQvLmV4ZWMoc3Rkb3V0KTtcbiAgaWYgKCFtYXRjaCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgeGNydW4gcmV0dXJuZWQgYSBub24tbnVtZXJpYyBpT1MgU0RLIHZlcnNpb246ICcke3Nka1ZlcnNpb259J2ApO1xuICB9XG4gIHJldHVybiBzZGtWZXJzaW9uO1xufVxuXG4vKipcbiAqIFJldHJpZXZlcyB0aGUgbWF4aW11bSB2ZXJzaW9uIG9mIGlPUyBTREsgc3VwcG9ydGVkIGJ5IHRoZSBpbnN0YWxsZWQgWGNvZGVcbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gdGltZW91dCBUaW1lb3V0IG9mIG1pbGxpc2Vjb25kcyB0byB3YWl0IGZvciB0ZXJtaW5hbCBjb21tYW5kc1xuICogQHBhcmFtIHtudW1iZXJ9IHJldHJpZXMgVGhlIG1heGltdW0gbnVtYmVyIG9mIHJldHJpZXNcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBTREsgdmVyc2lvblxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBTREsgdmVyc2lvbiBudW1iZXIgY2Fubm90IGJlIGRldGVybWluZWRcbiAqL1xuY29uc3QgZ2V0TWF4SU9TU0RLID0gXy5tZW1vaXplKFxuICBmdW5jdGlvbiBnZXRNYXhJT1NTREsgKHJldHJpZXMgPSBERUZBVUxUX05VTUJFUl9PRl9SRVRSSUVTLCB0aW1lb3V0ID0gWENSVU5fVElNRU9VVCkge1xuICAgIHJldHVybiByZXRyeShyZXRyaWVzLCBnZXRNYXhJT1NTREtXaXRob3V0UmV0cnksIHRpbWVvdXQpO1xuICB9XG4pO1xuXG4vKipcbiAqIFJldHJpZXZlcyB0aGUgbWF4aW11bSB2ZXJzaW9uIG9mIHR2T1MgU0RLIHN1cHBvcnRlZCBieSB0aGUgaW5zdGFsbGVkIFhjb2RlXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHRpbWVvdXQgVGltZW91dCBvZiBtaWxsaXNlY29uZHMgdG8gd2FpdCBmb3IgdGVybWluYWwgY29tbWFuZHNcbiAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59IFRoZSBTREsgdmVyc2lvblxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBTREsgdmVyc2lvbiBudW1iZXIgY2Fubm90IGJlIGRldGVybWluZWRcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0TWF4VFZPU1NES1dpdGhvdXRSZXRyeSAodGltZW91dCA9IFhDUlVOX1RJTUVPVVQpIHtcbiAgY29uc3QgYXJncyA9IFsnLS1zZGsnLCAnYXBwbGV0dnNpbXVsYXRvcicsICctLXNob3ctc2RrLXZlcnNpb24nXTtcbiAgY29uc3Qge3N0ZG91dH0gPSBhd2FpdCBydW5YY3J1bkNvbW1hbmQoYXJncywgdGltZW91dCk7XG4gIGNvbnN0IHNka1ZlcnNpb24gPSBzdGRvdXQudHJpbSgpO1xuICBpZiAoaXNOYU4ocGFyc2VGbG9hdChzZGtWZXJzaW9uKSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYHhjcnVuIHJldHVybmVkIGEgbm9uLW51bWVyaWMgdHZPUyBTREsgdmVyc2lvbjogJyR7c2RrVmVyc2lvbn0nYCk7XG4gIH1cbiAgcmV0dXJuIHNka1ZlcnNpb247XG59XG5cbi8qKlxuICogUmV0cmlldmVzIHRoZSBtYXhpbXVtIHZlcnNpb24gb2YgdHZPUyBTREsgc3VwcG9ydGVkIGJ5IHRoZSBpbnN0YWxsZWQgWGNvZGVcbiAqXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIFNESyB2ZXJzaW9uIG51bWJlciBjYW5ub3QgYmUgZGV0ZXJtaW5lZFxuICovXG5jb25zdCBnZXRNYXhUVk9TU0RLID0gXy5tZW1vaXplKFxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IHRpbWVvdXQgVGltZW91dCBvZiBtaWxsaXNlY29uZHMgdG8gd2FpdCBmb3IgdGVybWluYWwgY29tbWFuZHNcbiAgICogQHBhcmFtIHtudW1iZXJ9IHJldHJpZXMgVGhlIG1heGltdW0gbnVtYmVyIG9mIHJldHJpZXNcbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn0gVGhlIFNESyB2ZXJzaW9uXG4gICAqL1xuICBhc3luYyBmdW5jdGlvbiBnZXRNYXhUVk9TU0RLIChyZXRyaWVzID0gREVGQVVMVF9OVU1CRVJfT0ZfUkVUUklFUywgdGltZW91dCA9IFhDUlVOX1RJTUVPVVQpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovKGF3YWl0IHJldHJ5KHJldHJpZXMsIGdldE1heFRWT1NTREtXaXRob3V0UmV0cnksIHRpbWVvdXQpKTtcbiAgfVxuKTtcblxuZXhwb3J0IHtcbiAgZ2V0UGF0aCwgZ2V0VmVyc2lvbiwgZ2V0TWF4SU9TU0RLLCBnZXRNYXhJT1NTREtXaXRob3V0UmV0cnksXG4gIGdldE1heFRWT1NTREssIGdldE1heFRWT1NTREtXaXRob3V0UmV0cnksIGdldENsYW5nVmVyc2lvbixcbiAgZ2V0UGF0aEZyb21EZXZlbG9wZXJEaXIsIGdldFBhdGhGcm9tWGNvZGVTZWxlY3QsXG59O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQUEsUUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsS0FBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQUcsU0FBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksT0FBQSxHQUFBRixzQkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQUssYUFBQSxHQUFBTCxPQUFBO0FBQ0EsSUFBQU0sT0FBQSxHQUFBSixzQkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQU8sUUFBQSxHQUFBUCxPQUFBO0FBSUEsTUFBTVEseUJBQXlCLEdBQUcsQ0FBQztBQUNuQyxNQUFNQyxlQUFlLEdBQUcsb0JBQW9CO0FBRTVDLE1BQU1DLEdBQUcsR0FBR0MsZUFBTSxDQUFDQyxTQUFTLENBQUMsT0FBTyxDQUFDO0FBU3JDLGVBQWVDLHNCQUFzQkEsQ0FBRUMsT0FBTyxHQUFHQyxzQkFBYSxFQUFFO0VBSzlELE1BQU1DLG9CQUFvQixHQUFHLE1BQU9DLE1BQU0sSUFBSztJQUM3QyxNQUFNQyxVQUFVLEdBQUcsTUFBTSxJQUFBQyxxQkFBWSxFQUFDVixlQUFlLENBQUM7SUFDdEQsSUFBSVcsZUFBQyxDQUFDQyxPQUFPLENBQUNILFVB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