"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.XCRUN_TIMEOUT = void 0;
exports.findAppPaths = findAppPaths;
exports.readXcodePlist = readXcodePlist;
exports.runXcrunCommand = runXcrunCommand;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _bluebird = _interopRequireDefault(require("bluebird"));
var _teen_process = require("teen_process");
var _support = require("@appium/support");
var _path = _interopRequireDefault(require("path"));
const XCRUN_TIMEOUT = 15000;
exports.XCRUN_TIMEOUT = XCRUN_TIMEOUT;
async function runXcrunCommand(args, timeout = XCRUN_TIMEOUT) {
  try {
    return await (0, _teen_process.exec)('xcrun', args, {
      timeout
    });
  } catch (err) {
    if (err.stderr) {
      err.message = `${err.message}: ${err.stderr}`;
    }
    throw err;
  }
}
async function findAppPaths(bundleId) {
  let stdout;
  try {
    ({
      stdout
    } = await (0, _teen_process.exec)('/usr/bin/mdfind', [`kMDItemCFBundleIdentifier=${bundleId}`]));
  } catch (e) {
    return [];
  }
  const matchedPaths = _lodash.default.trim(stdout).split('\n').map(_lodash.default.trim).filter(Boolean);
  if (_lodash.default.isEmpty(matchedPaths)) {
    return [];
  }
  const results = matchedPaths.map(p => (async () => {
    if (await _support.fs.exists(p)) {
      return p;
    }
  })());
  return (await _bluebird.default.all(results)).filter(Boolean);
}
async function readXcodePlist(developerRoot) {
  const plistPath = _path.default.resolve(developerRoot, '..', 'Info.plist');
  return (await _support.fs.exists(plistPath)) ? await _support.plist.parsePlistFile(plistPath) : {};
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbG9kYXNoIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfYmx1ZWJpcmQiLCJfdGVlbl9wcm9jZXNzIiwiX3N1cHBvcnQiLCJfcGF0aCIsIlhDUlVOX1RJTUVPVVQiLCJleHBvcnRzIiwicnVuWGNydW5Db21tYW5kIiwiYXJncyIsInRpbWVvdXQiLCJleGVjIiwiZXJyIiwic3RkZXJyIiwibWVzc2FnZSIsImZpbmRBcHBQYXRocyIsImJ1bmRsZUlkIiwic3Rkb3V0IiwiZSIsIm1hdGNoZWRQYXRocyIsIl8iLCJ0cmltIiwic3BsaXQiLCJtYXAiLCJmaWx0ZXIiLCJCb29sZWFuIiwiaXNFbXB0eSIsInJlc3VsdHMiLCJwIiwiZnMiLCJleGlzdHMiLCJCIiwiYWxsIiwicmVhZFhjb2RlUGxpc3QiLCJkZXZlbG9wZXJSb290IiwicGxpc3RQYXRoIiwicGF0aCIsInJlc29sdmUiLCJwbGlzdCIsInBhcnNlUGxpc3RGaWxlIl0sInNvdXJjZXMiOlsiLi4vLi4vbGliL2hlbHBlcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCB7IGV4ZWMgfSBmcm9tICd0ZWVuX3Byb2Nlc3MnO1xuaW1wb3J0IHsgZnMsIHBsaXN0IH0gZnJvbSAnQGFwcGl1bS9zdXBwb3J0JztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5leHBvcnQgY29uc3QgWENSVU5fVElNRU9VVCA9IDE1MDAwO1xuXG4vKipcbiAqIEV4ZWN1dGVzICd4Y3J1bicgY29tbWFuZCBsaW5lIHV0aWxpdHlcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBhcmdzIHhjcnVuIGFyZ3VtZW50c1xuICogQHBhcmFtIHtudW1iZXJ9IHRpbWVvdXQgWzE1MDAwXSBUaGUgbWF4aW11bSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHdhaXQgdW50aWwgeGNydW4gZXhpc3RzXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxpbXBvcnQoXCJ0ZWVuX3Byb2Nlc3NcIikuVGVlblByb2Nlc3NFeGVjUmVzdWx0Pn0gVGhlIHJlc3VsdCBvZiB4Y3J1biBleGVjdXRpb25cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB4Y3J1biByZXR1cm5lZCBub24temVybyBleGl0IGNvZGUgb3IgdGltZWQgb3V0XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBydW5YY3J1bkNvbW1hbmQgKGFyZ3MsIHRpbWVvdXQgPSBYQ1JVTl9USU1FT1VUKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGF3YWl0IGV4ZWMoJ3hjcnVuJywgYXJncywge3RpbWVvdXR9KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gdGhlIHRydWUgZXJyb3IgY2FuIGJlIGhpZGRlbiB3aXRoaW4gdGhlIHN0ZGVyclxuICAgIGlmIChlcnIuc3RkZXJyKSB7XG4gICAgICBlcnIubWVzc2FnZSA9IGAke2Vyci5tZXNzYWdlfTogJHtlcnIuc3RkZXJyfWA7XG4gICAgfVxuXG4gICAgdGhyb3cgZXJyO1xuICB9XG59XG5cbi8qKlxuICogVXNlcyBtYWNPUyBTcG90bGlnaHQgc2VydmljZSB0byBkZXRlY3Qgd2hlcmUgdGhlIGdpdmVuIGFwcCBpcyBpbnN0YWxsZWRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYnVuZGxlSWQgQnVuZGxlIGlkZW50aWZpZXIgb2YgdGhlIHRhcmdldCBhcHBcbiAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZ1tdPn0gRnVsbCBwYXRocyB0byB3aGVyZSB0aGUgYXBwIHdpdGggdGhlIGdpdmVuIGJ1bmRsZSBpZCBpcyBwcmVzZW50LlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmluZEFwcFBhdGhzIChidW5kbGVJZCkge1xuICBsZXQgc3Rkb3V0O1xuICB0cnkge1xuICAgICh7c3Rkb3V0fSA9IGF3YWl0IGV4ZWMoJy91c3IvYmluL21kZmluZCcsIFtcbiAgICAgIGBrTURJdGVtQ0ZCdW5kbGVJZGVudGlmaWVyPSR7YnVuZGxlSWR9YFxuICAgIF0pKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGNvbnN0IG1hdGNoZWRQYXRocyA9IF8udHJpbShzdGRvdXQpXG4gICAgLnNwbGl0KCdcXG4nKVxuICAgIC5tYXAoXy50cmltKVxuICAgIC5maWx0ZXIoQm9vbGVhbik7XG4gIGlmIChfLmlzRW1wdHkobWF0Y2hlZFBhdGhzKSkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBjb25zdCByZXN1bHRzID0gbWF0Y2hlZFBhdGhzLm1hcCgocCkgPT4gKGFzeW5jICgpID0+IHtcbiAgICBpZiAoYXdhaXQgZnMuZXhpc3RzKHApKSB7XG4gICAgICByZXR1cm4gcDtcbiAgICB9XG4gIH0pKCkpO1xuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmdbXX0gKi8oYXdhaXQgQi5hbGwocmVzdWx0cykpLmZpbHRlcihCb29sZWFuKTtcbn1cblxuLyoqXG4gKiBGaW5kcyBhbmQgcmV0cmlldmVzIHRoZSBjb250ZW50IG9mIHRoZSBYY29kZSdzIEluZm8ucGxpc3QgZmlsZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBkZXZlbG9wZXJSb290IEZ1bGwgcGF0aCB0byB0aGUgQ29udGVudHMvRGV2ZWxvcGVyIGZvbGRlciB1bmRlciBYY29kZS5hcHAgcm9vdFxuICogQHJldHVybnMge1Byb21pc2U8b2JqZWN0Pn0gQWxsIHBsaXN0IGVudHJpZXMgYXMgYW4gb2JqZWN0IG9yIGFuIGVtcHR5IG9iamVjdCBpZiBubyBwbGlzdCB3YXMgZm91bmRcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlYWRYY29kZVBsaXN0IChkZXZlbG9wZXJSb290KSB7XG4gIGNvbnN0IHBsaXN0UGF0aCA9IHBhdGgucmVzb2x2ZShkZXZlbG9wZXJSb290LCAnLi4nLCAnSW5mby5wbGlzdCcpO1xuICByZXR1cm4gYXdhaXQgZnMuZXhpc3RzKHBsaXN0UGF0aClcbiAgICA/IGF3YWl0IHBsaXN0LnBhcnNlUGxpc3RGaWxlKHBsaXN0UGF0aClcbiAgICA6IHt9O1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLElBQUFBLE9BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFNBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLGFBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLFFBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLEtBQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQUVPLE1BQU1LLGFBQWEsR0FBRyxLQUFLO0FBQUNDLE9BQUEsQ0FBQUQsYUFBQSxHQUFBQSxhQUFBO0FBVTVCLGVBQWVFLGVBQWVBLENBQUVDLElBQUksRUFBRUMsT0FBTyxHQUFHSixhQUFhLEVBQUU7RUFDcEUsSUFBSTtJQUNGLE9BQU8sTUFBTSxJQUFBSyxrQkFBSSxFQUFDLE9BQU8sRUFBRUYsSUFBSSxFQUFFO01BQUNDO0lBQU8sQ0FBQyxDQUFDO0VBQzdDLENBQUMsQ0FBQyxPQUFPRSxHQUFHLEVBQUU7SUFFWixJQUFJQSxHQUFHLENBQUNDLE1BQU0sRUFBRTtNQUNkRCxHQUFHLENBQUNFLE9BQU8sR0FBSSxHQUFFRixHQUFHLENBQUNFLE9BQVEsS0FBSUYsR0FBRyxDQUFDQyxNQUFPLEVBQUM7SUFDL0M7SUFFQSxNQUFNRCxHQUFHO0VBQ1g7QUFDRjtBQVFPLGVBQWVHLFlBQVlBLENBQUVDLFFBQVEsRUFBRTtFQUM1QyxJQUFJQyxNQUFNO0VBQ1YsSUFBSTtJQUNGLENBQUM7TUFBQ0E7SUFBTSxDQUFDLEdBQUcsTUFBTSxJQUFBTixrQkFBSSxFQUFDLGlCQUFpQixFQUFFLENBQ3ZDLDZCQUE0QkssUUFBUyxFQUFDLENBQ3hDLENBQUM7RUFDSixDQUFDLENBQUMsT0FBT0UsQ0FBQyxFQUFFO0lBQ1YsT0FBTyxFQUFFO0VBQ1g7RUFFQSxNQUFNQyxZQUFZLEdBQUdDLGVBQUMsQ0FBQ0MsSUFBSSxDQUFDSixNQUFNLENBQUMsQ0FDaENLLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FDWEMsR0FBRyxDQUFDSCxlQUFDLENBQUNDLElBQUksQ0FBQyxDQUNYRyxNQUFNLENBQUNDLE9BQU8sQ0FBQztFQUNsQixJQUFJTCxlQUFDLENBQUNNLE9BQU8sQ0FBQ1AsWUFBWSxDQUFDLEVBQUU7SUFDM0IsT0FBTyxFQUFFO0VBQ1g7RUFDQSxNQUFNUSxPQUFPLEdBQUdSLFlBQVksQ0FBQ0ksR0FBRyxDQUFFSyxDQUFDLElBQUssQ0FBQyxZQUFZO0lBQ25ELElBQUksTUFBTUMsV0FBRSxDQUFDQyxNQUFNLENBQUNGLENBQUMsQ0FBQyxFQUFFO01BQ3RCLE9BQU9BLENBQUM7SUFDVjtFQUNGLENBQUMsR0FBRyxDQUFDO0VBQ0wsT0FBOEIsQ0FBQyxNQUFNRyxpQkFBQyxDQUFDQyxHQUFHLENBQUNMLE9BQU8sQ0FBQyxFQUFFSCxNQUFNLENBQUNDLE9BQU8sQ0FBQztBQUN0RTtBQVFPLGVBQWVRLGNBQWNBLENBQUVDLGFBQWEsRUFBRTtFQUNuRCxNQUFNQyxTQUFTLEdBQUdDLGFBQUksQ0FBQ0MsT0FBTyxDQUFDSCxhQUFhLEVBQUUsSUFBSSxFQUFFLFlBQVksQ0FBQztFQUNqRSxPQUFPLE9BQU1MLFdBQUUsQ0FBQ0MsTUFBTSxDQUFDSyxTQUFTLENBQUMsSUFDN0IsTUFBTUcsY0FBSyxDQUFDQyxjQUFjLENBQUNKLFNBQVMsQ0FBQyxHQUNyQyxDQUFDLENBQUM7QUFDUiJ9