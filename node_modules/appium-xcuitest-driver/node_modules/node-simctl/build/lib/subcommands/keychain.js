"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _os = _interopRequireDefault(require("os"));
var _promises = _interopRequireDefault(require("fs/promises"));
var _uuid = require("uuid");
var _path = _interopRequireDefault(require("path"));
var _lodash = _interopRequireDefault(require("lodash"));
var _rimraf = require("rimraf");
const commands = {};
async function handleRawPayload(payload, onPayloadStored) {
  const filePath = _path.default.resolve(_os.default.tmpdir(), `${(0, _uuid.v4)()}.pem`);
  try {
    if (_lodash.default.isBuffer(payload)) {
      await _promises.default.writeFile(filePath, payload);
    } else {
      await _promises.default.writeFile(filePath, payload, 'utf8');
    }
    await onPayloadStored(filePath);
  } finally {
    await (0, _rimraf.rimraf)(filePath);
  }
}
commands.addRootCertificate = async function addRootCertificate(cert, opts = {}) {
  const {
    raw = false
  } = opts;
  const execMethod = async certPath => await this.exec('keychain', {
    args: [this.requireUdid('keychain add-root-cert'), 'add-root-cert', certPath]
  });
  if (raw) {
    await handleRawPayload(cert, execMethod);
  } else {
    await execMethod(cert);
  }
};
commands.addCertificate = async function addCertificate(cert, opts = {}) {
  const {
    raw = false
  } = opts;
  const execMethod = async certPath => await this.exec('keychain', {
    args: [this.requireUdid('keychain add-cert'), 'add-cert', certPath]
  });
  if (raw) {
    await handleRawPayload(cert, execMethod);
  } else {
    await execMethod(cert);
  }
};
commands.resetKeychain = async function resetKeychain() {
  await this.exec('keychain', {
    args: [this.requireUdid('keychain reset'), 'reset']
  });
};
var _default = commands;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfb3MiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9taXNlcyIsIl91dWlkIiwiX3BhdGgiLCJfbG9kYXNoIiwiX3JpbXJhZiIsImNvbW1hbmRzIiwiaGFuZGxlUmF3UGF5bG9hZCIsInBheWxvYWQiLCJvblBheWxvYWRTdG9yZWQiLCJmaWxlUGF0aCIsInBhdGgiLCJyZXNvbHZlIiwib3MiLCJ0bXBkaXIiLCJ1dWlkVjQiLCJfIiwiaXNCdWZmZXIiLCJmcyIsIndyaXRlRmlsZSIsInJpbXJhZiIsImFkZFJvb3RDZXJ0aWZpY2F0ZSIsImNlcnQiLCJvcHRzIiwicmF3IiwiZXhlY01ldGhvZCIsImNlcnRQYXRoIiwiZXhlYyIsImFyZ3MiLCJyZXF1aXJlVWRpZCIsImFkZENlcnRpZmljYXRlIiwicmVzZXRLZXljaGFpbiIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvc3ViY29tbWFuZHMva2V5Y2hhaW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG9zIGZyb20gJ29zJztcbmltcG9ydCBmcyBmcm9tICdmcy9wcm9taXNlcyc7XG5pbXBvcnQgeyB2NCBhcyB1dWlkVjQgfSBmcm9tICd1dWlkJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IHJpbXJhZiB9IGZyb20gJ3JpbXJhZic7XG5cbmNvbnN0IGNvbW1hbmRzID0ge307XG5cbmFzeW5jIGZ1bmN0aW9uIGhhbmRsZVJhd1BheWxvYWQgKHBheWxvYWQsIG9uUGF5bG9hZFN0b3JlZCkge1xuICBjb25zdCBmaWxlUGF0aCA9IHBhdGgucmVzb2x2ZShvcy50bXBkaXIoKSwgYCR7dXVpZFY0KCl9LnBlbWApO1xuICB0cnkge1xuICAgIGlmIChfLmlzQnVmZmVyKHBheWxvYWQpKSB7XG4gICAgICBhd2FpdCBmcy53cml0ZUZpbGUoZmlsZVBhdGgsIHBheWxvYWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhd2FpdCBmcy53cml0ZUZpbGUoZmlsZVBhdGgsIHBheWxvYWQsICd1dGY4Jyk7XG4gICAgfVxuICAgIGF3YWl0IG9uUGF5bG9hZFN0b3JlZChmaWxlUGF0aCk7XG4gIH0gZmluYWxseSB7XG4gICAgYXdhaXQgcmltcmFmKGZpbGVQYXRoKTtcbiAgfVxufVxuXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gQ2VydE9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gcmF3IFtmYWxzZV0gLSB3aGV0aGVyIHRoZSBgY2VydGAgYXJndW1lbnRcbiAqIGlzIHRoZSBwYXRoIHRvIHRoZSBjZXJ0aWZpY2F0ZSBvbiB0aGUgbG9jYWwgZmlsZSBzeXN0ZW0gb3JcbiAqIGEgcmF3IGNlcnRpZmljYXRlIGNvbnRlbnRcbiAqL1xuXG4vKipcbiAqIEFkZHMgdGhlIGdpdmVuIGNlcnRpZmljYXRlIHRvIHRoZSBUcnVzdGVkIFJvb3QgU3RvcmUgb24gdGhlIHNpbXVsYXRvclxuICpcbiAqIEBzaW5jZSBYY29kZSAxMS40IFNES1xuICogQHBhcmFtIHtzdHJpbmd9IGNlcnQgdGhlIGZ1bGwgcGF0aCB0byBhIHZhbGlkIC5jZXJ0IGZpbGUgY29udGFpbmluZ1xuICogdGhlIGNlcnRpZmljYXRlIGNvbnRlbnQgb3IgdGhlIGNlcnRpZmljYXRlIGNvbnRlbnQgaXRzZWxmLCBkZXBlbmRpbmcgb25cbiAqIG9wdGlvbnNcbiAqIEBwYXJhbSB7Q2VydE9wdGlvbnN9IG9wdHNcbiAqIEB0aHJvd3Mge0Vycm9yfSBpZiB0aGUgY3VycmVudCBTREsgdmVyc2lvbiBkb2VzIG5vdCBzdXBwb3J0IHRoZSBjb21tYW5kXG4gKiBvciB0aGVyZSB3YXMgYW4gZXJyb3Igd2hpbGUgYWRkaW5nIHRoZSBjZXJ0aWZpY2F0ZVxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBgdWRpZGAgaW5zdGFuY2UgcHJvcGVydHkgaXMgdW5zZXRcbiAqL1xuY29tbWFuZHMuYWRkUm9vdENlcnRpZmljYXRlID0gYXN5bmMgZnVuY3Rpb24gYWRkUm9vdENlcnRpZmljYXRlIChjZXJ0LCBvcHRzID0ge30pIHtcbiAgY29uc3Qge1xuICAgIHJhdyA9IGZhbHNlLFxuICB9ID0gb3B0cztcbiAgY29uc3QgZXhlY01ldGhvZCA9IGFzeW5jIChjZXJ0UGF0aCkgPT4gYXdhaXQgdGhpcy5leGVjKCdrZXljaGFpbicsIHtcbiAgICBhcmdzOiBbdGhpcy5yZXF1aXJlVWRpZCgna2V5Y2hhaW4gYWRkLXJvb3QtY2VydCcpLCAnYWRkLXJvb3QtY2VydCcsIGNlcnRQYXRoXSxcbiAgfSk7XG4gIGlmIChyYXcpIHtcbiAgICBhd2FpdCBoYW5kbGVSYXdQYXlsb2FkKGNlcnQsIGV4ZWNNZXRob2QpO1xuICB9IGVsc2Uge1xuICAgIGF3YWl0IGV4ZWNNZXRob2QoY2VydCk7XG4gIH1cbn07XG5cbi8qKlxuICogQWRkcyB0aGUgZ2l2ZW4gY2VydGlmaWNhdGUgdG8gdGhlIEtleWNoYWluIFN0b3JlIG9uIHRoZSBzaW11bGF0b3JcbiAqXG4gKiBAc2luY2UgWGNvZGUgMTEuNCBTREtcbiAqIEBwYXJhbSB7c3RyaW5nfSBjZXJ0IHRoZSBmdWxsIHBhdGggdG8gYSB2YWxpZCAuY2VydCBmaWxlIGNvbnRhaW5pbmdcbiAqIHRoZSBjZXJ0aWZpY2F0ZSBjb250ZW50IG9yIHRoZSBjZXJ0aWZpY2F0ZSBjb250ZW50IGl0c2VsZiwgZGVwZW5kaW5nIG9uXG4gKiBvcHRpb25zXG4gKiBAcGFyYW0ge0NlcnRPcHRpb25zfSBvcHRzXG4gKiBAdGhyb3dzIHtFcnJvcn0gaWYgdGhlIGN1cnJlbnQgU0RLIHZlcnNpb24gZG9lcyBub3Qgc3VwcG9ydCB0aGUgY29tbWFuZFxuICogb3IgdGhlcmUgd2FzIGFuIGVycm9yIHdoaWxlIGFkZGluZyB0aGUgY2VydGlmaWNhdGVcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgYHVkaWRgIGluc3RhbmNlIHByb3BlcnR5IGlzIHVuc2V0XG4gKi9cbmNvbW1hbmRzLmFkZENlcnRpZmljYXRlID0gYXN5bmMgZnVuY3Rpb24gYWRkQ2VydGlmaWNhdGUgKGNlcnQsIG9wdHMgPSB7fSkge1xuICBjb25zdCB7XG4gICAgcmF3ID0gZmFsc2UsXG4gIH0gPSBvcHRzO1xuICBjb25zdCBleGVjTWV0aG9kID0gYXN5bmMgKGNlcnRQYXRoKSA9PiBhd2FpdCB0aGlzLmV4ZWMoJ2tleWNoYWluJywge1xuICAgIGFyZ3M6IFt0aGlzLnJlcXVpcmVVZGlkKCdrZXljaGFpbiBhZGQtY2VydCcpLCAnYWRkLWNlcnQnLCBjZXJ0UGF0aF0sXG4gIH0pO1xuICBpZiAocmF3KSB7XG4gICAgYXdhaXQgaGFuZGxlUmF3UGF5bG9hZChjZXJ0LCBleGVjTWV0aG9kKTtcbiAgfSBlbHNlIHtcbiAgICBhd2FpdCBleGVjTWV0aG9kKGNlcnQpO1xuICB9XG59O1xuXG4vKipcbiAqIFJlc2V0cyB0aGUgc2ltdWxhdG9yIGtleWNoYWluXG4gKlxuICogQHNpbmNlIFhjb2RlIDExLjQgU0RLXG4gKiBAdGhyb3dzIHtFcnJvcn0gaWYgdGhlIGN1cnJlbnQgU0RLIHZlcnNpb24gZG9lcyBub3Qgc3VwcG9ydCB0aGUgY29tbWFuZFxuICogb3IgdGhlcmUgd2FzIGFuIGVycm9yIHdoaWxlIHJlc2V0dGluZyB0aGUga2V5Y2hhaW5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgYHVkaWRgIGluc3RhbmNlIHByb3BlcnR5IGlzIHVuc2V0XG4gKi9cbmNvbW1hbmRzLnJlc2V0S2V5Y2hhaW4gPSBhc3luYyBmdW5jdGlvbiByZXNldEtleWNoYWluICgpIHtcbiAgYXdhaXQgdGhpcy5leGVjKCdrZXljaGFpbicsIHtcbiAgICBhcmdzOiBbdGhpcy5yZXF1aXJlVWRpZCgna2V5Y2hhaW4gcmVzZXQnKSwgJ3Jlc2V0J10sXG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY29tbWFuZHM7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsSUFBQUEsR0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsU0FBQSxHQUFBRixzQkFB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