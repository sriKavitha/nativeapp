"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BOOTSTRAP_PATH = void 0;
exports.generateXcodeConfigFile = generateXcodeConfigFile;
exports.getAdditionalRunContent = getAdditionalRunContent;
exports.getPIDsListeningOnPort = getPIDsListeningOnPort;
exports.getWDAUpgradeTimestamp = getWDAUpgradeTimestamp;
exports.getXctestrunFileName = getXctestrunFileName;
exports.getXctestrunFilePath = getXctestrunFilePath;
exports.isTvOS = isTvOS;
exports.killAppUsingPattern = killAppUsingPattern;
exports.killProcess = killProcess;
exports.randomInt = randomInt;
exports.resetProjectFile = resetProjectFile;
exports.resetTestProcesses = resetTestProcesses;
exports.setRealDeviceSecurity = setRealDeviceSecurity;
exports.setXctestrunFile = setXctestrunFile;
exports.updateProjectFile = updateProjectFile;
require("source-map-support/register");
var _support = require("@appium/support");
var _teen_process = require("teen_process");
var _path = _interopRequireDefault(require("path"));
var _logger = _interopRequireDefault(require("./logger"));
var _lodash = _interopRequireDefault(require("lodash"));
var _constants = require("./constants");
var _bluebird = _interopRequireDefault(require("bluebird"));
var _fs2 = _interopRequireDefault(require("fs"));
var _asyncbox = require("asyncbox");
const PROJECT_FILE = 'project.pbxproj';
const getModuleRoot = _lodash.default.memoize(function getModuleRoot() {
  let currentDir = _path.default.dirname(_path.default.resolve(__filename));
  let isAtFsRoot = false;
  while (!isAtFsRoot) {
    const manifestPath = _path.default.join(currentDir, 'package.json');
    try {
      if (_fs2.default.existsSync(manifestPath) && JSON.parse(_fs2.default.readFileSync(manifestPath, 'utf8')).name === 'appium-webdriveragent') {
        return currentDir;
      }
    } catch (ign) {}
    currentDir = _path.default.dirname(currentDir);
    isAtFsRoot = currentDir.length <= _path.default.dirname(currentDir).length;
  }
  throw new Error('Cannot find the root folder of the appium-webdriveragent Node.js module');
});
const BOOTSTRAP_PATH = getModuleRoot();
exports.BOOTSTRAP_PATH = BOOTSTRAP_PATH;
async function getPIDsUsingPattern(pattern) {
  const args = ['-if', pattern];
  try {
    const {
      stdout
    } = await (0, _teen_process.exec)('pgrep', args);
    return stdout.split(/\s+/).map(x => parseInt(x, 10)).filter(_lodash.default.isInteger).map(x => `${x}`);
  } catch (err) {
    _logger.default.debug(`'pgrep ${args.join(' ')}' didn't detect any matching processes. Return code: ${err.code}`);
    return [];
  }
}
async function killAppUsingPattern(pgrepPattern) {
  const signals = [2, 15, 9];
  for (const signal of signals) {
    const matchedPids = await getPIDsUsingPattern(pgrepPattern);
    if (_lodash.default.isEmpty(matchedPids)) {
      return;
    }
    const args = [`-${signal}`, ...matchedPids];
    try {
      await (0, _teen_process.exec)('kill', args);
    } catch (err) {
      _logger.default.debug(`kill ${args.join(' ')} -> ${err.message}`);
    }
    if (signal === _lodash.default.last(signals)) {
      return;
    }
    try {
      await (0, _asyncbox.waitForCondition)(async () => {
        const pidCheckPromises = matchedPids.map(pid => (0, _teen_process.exec)('kill', ['-0', pid]).then(() => false).catch(() => true));
        return (await _bluebird.default.all(pidCheckPromises)).every(x => x === true);
      }, {
        waitMs: 1000,
        intervalMs: 100
      });
      return;
    } catch (ign) {}
  }
}
function isTvOS(platformName) {
  return _lodash.default.toLower(platformName) === _lodash.default.toLower(_constants.PLATFORM_NAME_TVOS);
}
async function replaceInFile(file, find, replace) {
  let contents = await _support.fs.readFile(file, 'utf8');
  let newContents = contents.replace(find, replace);
  if (newContents !== contents) {
    await _support.fs.writeFile(file, newContents, 'utf8');
  }
}
async function updateProjectFile(agentPath, newBundleId) {
  let projectFilePath = _path.default.resolve(agentPath, PROJECT_FILE);
  try {
    await _support.fs.copyFile(projectFilePath, `${projectFilePath}.old`);
    await replaceInFile(projectFilePath, new RegExp(_lodash.default.escapeRegExp(_constants.WDA_RUNNER_BUNDLE_ID), 'g'), newBundleId);
    _logger.default.debug(`Successfully updated '${projectFilePath}' with bundle id '${newBundleId}'`);
  } catch (err) {
    _logger.default.debug(`Error updating project file: ${err.message}`);
    _logger.default.warn(`Unable to update project file '${projectFilePath}' with ` + `bundle id '${newBundleId}'. WebDriverAgent may not start`);
  }
}
async function resetProjectFile(agentPath) {
  const projectFilePath = _path.default.join(agentPath, PROJECT_FILE);
  try {
    if (!(await _support.fs.exists(`${projectFilePath}.old`))) {
      return;
    }
    await _support.fs.mv(`${projectFilePath}.old`, projectFilePath);
    _logger.default.debug(`Successfully reset '${projectFilePath}' with bundle id '${_constants.WDA_RUNNER_BUNDLE_ID}'`);
  } catch (err) {
    _logger.default.debug(`Error resetting project file: ${err.message}`);
    _logger.default.warn(`Unable to reset project file '${projectFilePath}' with ` + `bundle id '${_constants.WDA_RUNNER_BUNDLE_ID}'. WebDriverAgent has been ` + `modified and not returned to the original state.`);
  }
}
async function setRealDeviceSecurity(keychainPath, keychainPassword) {
  _logger.default.debug('Setting security for iOS device');
  await (0, _teen_process.exec)('security', ['-v', 'list-keychains', '-s', keychainPath]);
  await (0, _teen_process.exec)('security', ['-v', 'unlock-keychain', '-p', keychainPassword, keychainPath]);
  await (0, _teen_process.exec)('security', ['set-keychain-settings', '-t', '3600', '-l', keychainPath]);
}
async function generateXcodeConfigFile(orgId, signingId) {
  _logger.default.debug(`Generating xcode config file for orgId '${orgId}' and signingId ` + `'${signingId}'`);
  const contents = `DEVELOPMENT_TEAM = ${orgId}
CODE_SIGN_IDENTITY = ${signingId}
`;
  const xcconfigPath = await _support.tempDir.path('appium-temp.xcconfig');
  _logger.default.debug(`Writing xcode config file to ${xcconfigPath}`);
  await _support.fs.writeFile(xcconfigPath, contents, 'utf8');
  return xcconfigPath;
}
async function setXctestrunFile(deviceInfo, sdkVersion, bootstrapPath, wdaRemotePort) {
  const xctestrunFilePath = await getXctestrunFilePath(deviceInfo, sdkVersion, bootstrapPath);
  const xctestRunContent = await _support.plist.parsePlistFile(xctestrunFilePath);
  const updateWDAPort = getAdditionalRunContent(deviceInfo.platformName, wdaRemotePort);
  const newXctestRunContent = _lodash.default.merge(xctestRunContent, updateWDAPort);
  await _support.plist.updatePlistFile(xctestrunFilePath, newXctestRunContent, true);
  return xctestrunFilePath;
}
function getAdditionalRunContent(platformName, wdaRemotePort) {
  const runner = `WebDriverAgentRunner${isTvOS(platformName) ? '_tvOS' : ''}`;
  return {
    [runner]: {
      EnvironmentVariables: {
        USE_PORT: `${wdaRemotePort}`
      }
    }
  };
}
async function getXctestrunFilePath(deviceInfo, sdkVersion, bootstrapPath) {
  const sdkBased = [_path.default.resolve(bootstrapPath, `${deviceInfo.udid}_${sdkVersion}.xctestrun`), sdkVersion];
  const platformBased = [_path.default.resolve(bootstrapPath, `${deviceInfo.udid}_${deviceInfo.platformVersion}.xctestrun`), deviceInfo.platformVersion];
  for (const [filePath, version] of [sdkBased, platformBased]) {
    if (await _support.fs.exists(filePath)) {
      _logger.default.info(`Using '${filePath}' as xctestrun file`);
      return filePath;
    }
    const originalXctestrunFile = _path.default.resolve(bootstrapPath, getXctestrunFileName(deviceInfo, version));
    if (await _support.fs.exists(originalXctestrunFile)) {
      await _support.fs.copyFile(originalXctestrunFile, filePath);
      _logger.default.info(`Using '${filePath}' as xctestrun file copied by '${originalXctestrunFile}'`);
      return filePath;
    }
  }
  _logger.default.errorAndThrow(`If you are using 'useXctestrunFile' capability then you ` + `need to have a xctestrun file (expected: ` + `'${_path.default.resolve(bootstrapPath, getXctestrunFileName(deviceInfo, sdkVersion))}')`);
}
function getXctestrunFileName(deviceInfo, version) {
  return isTvOS(deviceInfo.platformName) ? `WebDriverAgentRunner_tvOS_appletv${deviceInfo.isRealDevice ? `os${version}-arm64` : `simulator${version}-x86_64`}.xctestrun` : `WebDriverAgentRunner_iphone${deviceInfo.isRealDevice ? `os${version}-arm64` : `simulator${version}-x86_64`}.xctestrun`;
}
async function killProcess(name, proc) {
  if (!proc || !proc.isRunning) {
    return;
  }
  _logger.default.info(`Shutting down '${name}' process (pid '${proc.proc.pid}')`);
  _logger.default.info(`Sending 'SIGTERM'...`);
  try {
    await proc.stop('SIGTERM', 1000);
    return;
  } catch (err) {
    if (!err.message.includes(`Process didn't end after`)) {
      throw err;
    }
    _logger.default.debug(`${name} process did not end in a timely fashion: '${err.message}'.`);
  }
  _logger.default.info(`Sending 'SIGKILL'...`);
  try {
    await proc.stop('SIGKILL');
  } catch (err) {
    if (err.message.includes('not currently running')) {
      return;
    }
    throw err;
  }
}
function randomInt(low, high) {
  return Math.floor(Math.random() * (high - low) + low);
}
async function getWDAUpgradeTimestamp() {
  const packageManifest = _path.default.resolve(getModuleRoot(), 'package.json');
  if (!(await _support.fs.exists(packageManifest))) {
    return null;
  }
  const {
    mtime
  } = await _support.fs.stat(packageManifest);
  return mtime.getTime();
}
async function resetTestProcesses(udid, isSimulator) {
  const processPatterns = [`xcodebuild.*${udid}`];
  if (isSimulator) {
    processPatterns.push(`${udid}.*XCTRunner`);
    processPatterns.push(`xctest.*${udid}`);
  }
  _logger.default.debug(`Killing running processes '${processPatterns.join(', ')}' for the device ${udid}...`);
  await _bluebird.default.all(processPatterns.map(killAppUsingPattern));
}
async function getPIDsListeningOnPort(port, filteringFunc = null) {
  const result = [];
  try {
    const {
      stdout
    } = await (0, _teen_process.exec)('lsof', ['-ti', `tcp:${port}`]);
    result.push(...stdout.trim().split(/\n+/));
  } catch (e) {
    if (e.code !== 1) {
      _logger.default.debug(`Error getting processes listening on port '${port}': ${e.stderr || e.message}`);
    }
    return result;
  }
  if (!_lodash.default.isFunction(filteringFunc)) {
    return result;
  }
  return await _bluebird.default.filter(result, async pid => {
    let stdout;
    try {
      ({
        stdout
      } = await (0, _teen_process.exec)('ps', ['-p', pid, '-o', 'command']));
    } catch (e) {
      if (e.code === 1) {
        return false;
      }
      throw e;
    }
    return await filteringFunc(stdout);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,