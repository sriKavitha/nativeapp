"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRealDeviceObj = exports.installToRealDevice = exports.runRealDeviceReset = exports.getOSVersion = exports.getConnectedDevices = void 0;
const appium_ios_device_1 = require("appium-ios-device");
const ios_deploy_1 = __importDefault(require("./ios-deploy"));
const logger_1 = __importDefault(require("./logger"));
const app_utils_1 = require("./app-utils");
async function getConnectedDevices() {
    return await appium_ios_device_1.utilities.getConnectedDevices();
}
exports.getConnectedDevices = getConnectedDevices;
async function getOSVersion(udid) {
    return await appium_ios_device_1.utilities.getOSVersion(udid);
}
exports.getOSVersion = getOSVersion;
async function resetRealDevice(device, opts) {
    const { bundleId, fullReset } = opts;
    if (!bundleId) {
        return;
    }
    if (bundleId === app_utils_1.SAFARI_BUNDLE_ID) {
        logger_1.default.debug('Reset requested. About to terminate Safari');
        await device.terminateApp(bundleId);
        return;
    }
    if (!fullReset) {
        return;
    }
    logger_1.default.debug(`Reset: fullReset requested. Will try to uninstall the app '${bundleId}'.`);
    if (!await device.isAppInstalled(bundleId)) {
        logger_1.default.debug('Reset: app not installed. No need to uninstall');
        return;
    }
    try {
        await device.remove(bundleId);
    }
    catch (err) {
        logger_1.default.error(`Reset: could not remove '${bundleId}' from device: ${err.message}`);
        throw err;
    }
    logger_1.default.debug(`Reset: removed '${bundleId}'`);
}
async function runRealDeviceReset(device, opts) {
    if (!opts.noReset || opts.fullReset) {
        logger_1.default.debug('Reset: running ios real device reset flow');
        if (!opts.noReset) {
            await resetRealDevice(device, opts);
        }
    }
    else {
        logger_1.default.debug('Reset: fullReset not set. Leaving as is');
    }
}
exports.runRealDeviceReset = runRealDeviceReset;
/**
 * @typedef {Object} InstallOptions
 *
 * @property {boolean} [skipUninstall] Whether to skip app uninstall before installing it
 * @property {'serial'|'parallel'|'ios-deploy'} [strategy='serial'] One of possible install strategies ('serial', 'parallel', 'ios-deploy')
 * @property {number} [timeout] App install timeout
 */
/**
 * @param {IOSDeploy} device The device instance
 * @param {string} [app] The app to the path
 * @param {string} [bundleId] The bundle id to ensure it is already installed and uninstall it
 * @param {InstallOptions} [opts]
 */
async function installToRealDevice(device, app, bundleId, opts) {
    if (!device.udid || !app) {
        logger_1.default.debug('No device id or app, not installing to real device.');
        return;
    }
    const { skipUninstall, strategy, timeout, } = opts ?? {};
    if (!skipUninstall && bundleId && await device.isAppInstalled(bundleId)) {
        logger_1.default.debug(`Reset requested. Removing app with id '${bundleId}' from the device`);
        await device.remove(bundleId);
    }
    logger_1.default.debug(`Installing '${app}' on device with UUID '${device.udid}'...`);
    await device.install(app, timeout, strategy);
    logger_1.default.debug('The app has been installed successfully.');
}
exports.installToRealDevice = installToRealDevice;
function getRealDeviceObj(udid) {
    logger_1.default.debug(`Creating iDevice object with udid '${udid}'`);
    return new ios_deploy_1.default(udid);
}
exports.getRealDeviceObj = getRealDeviceObj;
//# sourceMappingURL=real-device-management.js.map