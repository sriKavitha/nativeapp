export type SimulatorLookupOptions = {
    /**
     * - The name of the device to lookup
     */
    deviceName?: string | undefined;
    /**
     * - The platform version string
     */
    platformVersion: string;
    /**
     * - The full path to the simulator devices set
     */
    simulatorDevicesSetPath?: string | undefined;
};
export type InstallOptions = {
    /**
     * Whether to skip app uninstall before installing it
     */
    skipUninstall?: boolean | undefined;
    /**
     * Whether the simulator is brand new
     */
    newSimulator?: boolean | undefined;
};
/**
 * Capability set by a user
 *
 * @property {string} deviceName - A name for the device
 * @property {string} platformVersion - The version of iOS to use
 */
/**
 * Create a new simulator with `appiumTest-` prefix and return the object.
 *
 * @param {object} caps - Capability set by a user. The options available are:
 * @property {string} platform [iOS] - Platform name in order to specify runtime such as 'iOS', 'tvOS', 'watchOS'
 * @returns {Promise<object>} Simulator object associated with the udid passed in.
 */
export function createSim(caps: object, platform?: string): Promise<object>;
/**
 * @typedef {Object} SimulatorLookupOptions
 * @property {string} [deviceName] - The name of the device to lookup
 * @property {string} platformVersion - The platform version string
 * @property {string} [simulatorDevicesSetPath] - The full path to the simulator devices set
 */
/**
 * Get a simulator which is already running.
 *
 * @param {SimulatorLookupOptions} opts
 * @returns {Promise<any|null>} The matched Simulator instance or `null` if no matching  device is found.
 */
export function getExistingSim(opts?: SimulatorLookupOptions): Promise<any | null>;
export function runSimulatorReset(device: any, opts: any): Promise<void>;
/**
 * @typedef {Object} InstallOptions
 *
 * @property {boolean} [skipUninstall] Whether to skip app uninstall before installing it
 * @property {boolean} [newSimulator=false] Whether the simulator is brand new
 */
/**
 * @param {any} device The simulator device object
 * @param {string} app The app to the path
 * @param {string} [bundleId] The bundle id to ensure it is already installed and uninstall it
 * @param {InstallOptions} opts
 */
export function installToSimulator(device: any, app: string, bundleId?: string | undefined, opts?: InstallOptions): Promise<void>;
export function shutdownSimulator(device: any): Promise<void>;
export function shutdownOtherSimulators(currentDevice: any): Promise<void>;
/**
 * Configures Safari options based on the given session capabilities
 *
 * @param {any} sim Simulator instance
 * @param {object} opts Session capabilities
 * @return {Promise<boolean>} true if any preferences have been updated
 */
export function setSafariPrefs(sim: any, opts?: object): Promise<boolean>;
/**
 * Changes Simulator localization preferences
 *
 * @param {any} sim Simulator instance
 * @param {object} opts Session capabilities
 * @returns {Promise<boolean>} True if preferences were changed
 */
export function setLocalizationPrefs(sim: any, opts?: object): Promise<boolean>;
//# sourceMappingURL=simulator-management.d.ts.map