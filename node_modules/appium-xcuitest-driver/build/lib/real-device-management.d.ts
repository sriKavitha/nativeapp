export type InstallOptions = {
    /**
     * Whether to skip app uninstall before installing it
     */
    skipUninstall?: boolean | undefined;
    /**
     * One of possible install strategies ('serial', 'parallel', 'ios-deploy')
     */
    strategy?: "serial" | "parallel" | "ios-deploy" | undefined;
    /**
     * App install timeout
     */
    timeout?: number | undefined;
};
export function getConnectedDevices(): Promise<any>;
export function getOSVersion(udid: any): Promise<any>;
export function runRealDeviceReset(device: any, opts: any): Promise<void>;
/**
 * @typedef {Object} InstallOptions
 *
 * @property {boolean} [skipUninstall] Whether to skip app uninstall before installing it
 * @property {'serial'|'parallel'|'ios-deploy'} [strategy='serial'] One of possible install strategies ('serial', 'parallel', 'ios-deploy')
 * @property {number} [timeout] App install timeout
 */
/**
 * @param {IOSDeploy} device The device instance
 * @param {string} [app] The app to the path
 * @param {string} [bundleId] The bundle id to ensure it is already installed and uninstall it
 * @param {InstallOptions} [opts]
 */
export function installToRealDevice(device: IOSDeploy, app?: string | undefined, bundleId?: string | undefined, opts?: InstallOptions | undefined): Promise<void>;
export function getRealDeviceObj(udid: any): IOSDeploy;
import IOSDeploy from "./ios-deploy";
//# sourceMappingURL=real-device-management.d.ts.map