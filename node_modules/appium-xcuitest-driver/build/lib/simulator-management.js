"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setLocalizationPrefs = exports.setSafariPrefs = exports.shutdownOtherSimulators = exports.shutdownSimulator = exports.installToSimulator = exports.runSimulatorReset = exports.getExistingSim = exports.createSim = void 0;
const appium_ios_simulator_1 = require("appium-ios-simulator");
const node_simctl_1 = __importDefault(require("node-simctl"));
const appium_webdriveragent_1 = require("appium-webdriveragent");
const lodash_1 = __importDefault(require("lodash"));
const logger_1 = __importDefault(require("./logger"));
const support_1 = require("appium/support");
const desired_caps_1 = require("./desired-caps");
const APPIUM_SIM_PREFIX = 'appiumTest';
const SAFARI_OPTS_ALIASES_MAP = /** @type {const} */ ({
    safariAllowPopups: [
        ['WebKitJavaScriptCanOpenWindowsAutomatically', 'JavaScriptCanOpenWindowsAutomatically'],
        (x) => Number(Boolean(x)),
    ],
    safariIgnoreFraudWarning: [
        ['WarnAboutFraudulentWebsites'],
        (x) => Number(!x),
    ],
    safariOpenLinksInBackground: [
        ['OpenLinksInBackground'],
        (x) => Number(Boolean(x)),
    ]
});
/**
 * Capability set by a user
 *
 * @property {string} deviceName - A name for the device
 * @property {string} platformVersion - The version of iOS to use
 */
/**
 * Create a new simulator with `appiumTest-` prefix and return the object.
 *
 * @param {object} caps - Capability set by a user. The options available are:
 * @property {string} platform [iOS] - Platform name in order to specify runtime such as 'iOS', 'tvOS', 'watchOS'
 * @returns {Promise<object>} Simulator object associated with the udid passed in.
 */
async function createSim(caps, platform = desired_caps_1.PLATFORM_NAME_IOS) {
    const devicesSetPath = caps.simulatorDevicesSetPath;
    const udid = await new node_simctl_1.default({ devicesSetPath }).createDevice(`${APPIUM_SIM_PREFIX}-${support_1.util.uuidV4().toUpperCase()}-${caps.deviceName}`, caps.deviceName, caps.platformVersion, { platform });
    return await (0, appium_ios_simulator_1.getSimulator)(udid, {
        platform,
        checkExistence: false,
        devicesSetPath,
    });
}
exports.createSim = createSim;
/**
 * @typedef {Object} SimulatorLookupOptions
 * @property {string} [deviceName] - The name of the device to lookup
 * @property {string} platformVersion - The platform version string
 * @property {string} [simulatorDevicesSetPath] - The full path to the simulator devices set
 */
/**
 * Get a simulator which is already running.
 *
 * @param {SimulatorLookupOptions} opts
 * @returns {Promise<any|null>} The matched Simulator instance or `null` if no matching  device is found.
 */
async function getExistingSim(opts = /** @type {SimulatorLookupOptions} */ ({})) {
    const { platformVersion, deviceName, simulatorDevicesSetPath: devicesSetPath, } = opts;
    let appiumTestDevice;
    const simctl = new node_simctl_1.default({ devicesSetPath });
    for (const device of lodash_1.default.values(await simctl.getDevices(platformVersion))) {
        if ((deviceName && device.name === deviceName) || !deviceName) {
            return await (0, appium_ios_simulator_1.getSimulator)(device.udid, {
                platform: device.platform,
                checkExistence: false,
                devicesSetPath,
            });
        }
        if (device.name.startsWith(APPIUM_SIM_PREFIX)
            && ((deviceName && device.name.endsWith(deviceName)) || !deviceName)) {
            appiumTestDevice = device;
            // choose the first booted simulator
            if (device.state === 'Booted') {
                break;
            }
        }
    }
    if (appiumTestDevice) {
        logger_1.default.warn(`Unable to find device '${deviceName}'. ` +
            `Found '${appiumTestDevice.name}' (udid: '${appiumTestDevice.udid}') instead`);
        return await (0, appium_ios_simulator_1.getSimulator)(appiumTestDevice.udid, {
            platform: appiumTestDevice.platform,
            checkExistence: false,
            devicesSetPath,
        });
    }
    return null;
}
exports.getExistingSim = getExistingSim;
async function shutdownSimulator(device) {
    // stop XCTest processes if running to avoid unexpected side effects
    await (0, appium_webdriveragent_1.resetTestProcesses)(device.udid, true);
    await device.shutdown();
}
exports.shutdownSimulator = shutdownSimulator;
async function runSimulatorReset(device, opts) {
    const { noReset, fullReset, keychainsExcludePatterns, keepKeyChains, bundleId, app, browserName, enforceSimulatorShutdown, } = opts;
    if (noReset && !fullReset) {
        // noReset === true && fullReset === false
        logger_1.default.debug('Reset: noReset is on. Leaving simulator as is');
        return;
    }
    if (!device) {
        logger_1.default.debug('Reset: no device available. Skipping');
        return;
    }
    if (fullReset) {
        logger_1.default.debug('Reset: fullReset is on. Cleaning simulator');
        await shutdownSimulator(device);
        const isKeychainsBackupSuccessful = (keychainsExcludePatterns || keepKeyChains)
            && await device.backupKeychains();
        await device.clean();
        if (isKeychainsBackupSuccessful) {
            await device.restoreKeychains(keychainsExcludePatterns || []);
            logger_1.default.info(`Successfully restored keychains after full reset`);
        }
        else if (keychainsExcludePatterns || keepKeyChains) {
            logger_1.default.warn('Cannot restore keychains after full reset, because ' +
                'the backup operation did not succeed');
        }
    }
    else if (bundleId) {
        // fastReset or noReset
        // Terminate the app under test if it is still running on Simulator
        try {
            await device.terminateApp(bundleId);
        }
        catch (err) {
            logger_1.default.warn(`Reset: failed to terminate Simulator application with id "${bundleId}"`);
        }
        if (app) {
            logger_1.default.info('Not scrubbing third party app in anticipation of uninstall');
        }
        else {
            const isSafari = lodash_1.default.toLower(browserName) === 'safari';
            try {
                if (isSafari) {
                    await device.scrubSafari();
                }
                else {
                    await device.scrubApp(bundleId);
                }
            }
            catch (err) {
                logger_1.default.debug(err.stack);
                logger_1.default.warn(err.message);
                logger_1.default.warn(`Reset: could not scrub ${isSafari ? 'Safari browser' : 'application with id "' + opts.bundleId + '"'}. ` +
                    `Leaving as is.`);
            }
        }
        if (enforceSimulatorShutdown && await device.isRunning()) {
            await shutdownSimulator(device);
        }
    }
}
exports.runSimulatorReset = runSimulatorReset;
/**
 * @typedef {Object} InstallOptions
 *
 * @property {boolean} [skipUninstall] Whether to skip app uninstall before installing it
 * @property {boolean} [newSimulator=false] Whether the simulator is brand new
 */
/**
 * @param {any} device The simulator device object
 * @param {string} app The app to the path
 * @param {string} [bundleId] The bundle id to ensure it is already installed and uninstall it
 * @param {InstallOptions} opts
 */
async function installToSimulator(device, app, bundleId, opts = /** @type {InstallOptions} */ ({})) {
    if (!app) {
        logger_1.default.debug('No app path is given. Nothing to install.');
        return;
    }
    const { skipUninstall, newSimulator = false, } = opts;
    if (!skipUninstall && !newSimulator && bundleId && await device.isAppInstalled(bundleId)) {
        logger_1.default.debug(`Reset requested. Removing app with id '${bundleId}' from the device`);
        await device.removeApp(bundleId);
    }
    logger_1.default.debug(`Installing '${app}' on Simulator with UUID '${device.udid}'...`);
    try {
        await device.installApp(app);
    }
    catch (e) {
        // it sometimes fails on Xcode 10 because of a race condition
        logger_1.default.info(`Got an error on '${app}' install: ${e.message}`);
        logger_1.default.info('Retrying application install');
        await device.installApp(app);
    }
    logger_1.default.debug('The app has been installed successfully.');
}
exports.installToSimulator = installToSimulator;
async function shutdownOtherSimulators(currentDevice) {
    const simctl = new node_simctl_1.default({
        devicesSetPath: currentDevice.devicesSetPath
    });
    const allDevices = lodash_1.default.flatMap(lodash_1.default.values(await simctl.getDevices()));
    const otherBootedDevices = allDevices.filter((device) => device.udid !== currentDevice.udid && device.state === 'Booted');
    if (lodash_1.default.isEmpty(otherBootedDevices)) {
        logger_1.default.info('No other running simulators have been detected');
        return;
    }
    logger_1.default.info(`Detected ${otherBootedDevices.length} other running ${support_1.util.pluralize('Simulator', otherBootedDevices.length)}.` +
        `Shutting them down...`);
    for (const { udid } of otherBootedDevices) {
        // It is necessary to stop the corresponding xcodebuild process before killing
        // the simulator, otherwise it will be automatically restarted
        await (0, appium_webdriveragent_1.resetTestProcesses)(udid, true);
        simctl.udid = udid;
        await simctl.shutdownDevice();
    }
}
exports.shutdownOtherSimulators = shutdownOtherSimulators;
/**
 * Configures Safari options based on the given session capabilities
 *
 * @param {any} sim Simulator instance
 * @param {object} opts Session capabilities
 * @return {Promise<boolean>} true if any preferences have been updated
 */
async function setSafariPrefs(sim, opts = {}) {
    const safariSettings = lodash_1.default.cloneDeep(opts.safariGlobalPreferences ?? {});
    for (const [name, [aliases, valueConverter]] of lodash_1.default.toPairs(SAFARI_OPTS_ALIASES_MAP)) {
        if (!lodash_1.default.has(opts, name)) {
            continue;
        }
        for (const alias of aliases) {
            safariSettings[alias] = valueConverter(opts[name]);
        }
    }
    if (lodash_1.default.isEmpty(safariSettings)) {
        return false;
    }
    logger_1.default.debug(`About to update Safari preferences: ${JSON.stringify(safariSettings)}`);
    await sim.updateSafariSettings(safariSettings);
    return true;
}
exports.setSafariPrefs = setSafariPrefs;
/**
 * Changes Simulator localization preferences
 *
 * @param {any} sim Simulator instance
 * @param {object} opts Session capabilities
 * @returns {Promise<boolean>} True if preferences were changed
 */
async function setLocalizationPrefs(sim, opts = {}) {
    const { language, locale, calendarFormat, } = opts;
    const l10nConfig = {};
    if (language) {
        l10nConfig.language = { name: language };
    }
    if (locale) {
        l10nConfig.locale = { name: locale };
        if (calendarFormat) {
            l10nConfig.locale.calendar = calendarFormat;
        }
    }
    if (lodash_1.default.isEmpty(l10nConfig)) {
        return false;
    }
    logger_1.default.debug(`About to update localization preferences: ${JSON.stringify(l10nConfig)}`);
    await sim.configureLocalization(l10nConfig);
    return true;
}
exports.setLocalizationPrefs = setLocalizationPrefs;
//# sourceMappingURL=simulator-management.js.map