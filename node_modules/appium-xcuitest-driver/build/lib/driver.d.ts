export default XCUITestDriver;
export type ExternalDriver<C extends import("@appium/types").Constraints, Ctx = string> = import('@appium/types').ExternalDriver<C, Ctx>;
export type XCUITestDriverConstraints = typeof desiredCapConstraints;
export type XCUITestDriverOpts = import('@appium/types').DriverOpts<XCUITestDriverConstraints>;
export type FullContext = import('./commands/types').FullContext;
/**
 * @implements {ExternalDriver<XCUITestDriverConstraints, FullContext|string>}
 * @extends {BaseDriver<XCUITestDriverConstraints>}
 * @privateRemarks **This class should be considered "final"**. It cannot be extended
 * due to use of public class field assignments.  If extending this class becomes a hard requirement, refer to the implementation of `BaseDriver` on how to do so.
 */
export class XCUITestDriver extends BaseDriver<{
    readonly platformName: {
        readonly presence: true;
        readonly isString: true;
        readonly inclusionCaseInsensitive: readonly ["iOS", "tvOS"];
    };
    readonly browserName: {
        readonly isString: true;
    };
    readonly app: {
        readonly isString: true;
    };
    readonly calendarFormat: {
        readonly isString: true;
    };
    readonly bundleId: {
        readonly isString: true;
    };
    readonly udid: {
        readonly isString: true;
    };
    readonly autoAcceptAlerts: {
        readonly isBoolean: true;
    };
    readonly autoDismissAlerts: {
        readonly isBoolean: true;
    };
    readonly nativeWebTap: {
        readonly isBoolean: true;
    };
    readonly safariInitialUrl: {
        readonly isString: true;
    };
    readonly safariAllowPopups: {
        readonly isBoolean: true;
    };
    readonly safariIgnoreFraudWarning: {
        readonly isBoolean: true;
    };
    readonly safariOpenLinksInBackground: {
        readonly isBoolean: true;
    };
    readonly safariShowFullResponse: {
        readonly isBoolean: true;
    };
    readonly keepKeyChains: {
        readonly isBoolean: true;
    };
    readonly resetLocationService: {
        readonly isBoolean: true;
    };
    readonly localizableStringsDir: {
        readonly isString: true;
    };
    readonly processArguments: {};
    readonly showIOSLog: {
        readonly isBoolean: true;
    };
    readonly webviewConnectRetries: {
        readonly isNumber: true;
    };
    readonly clearSystemFiles: {
        readonly isBoolean: true;
    };
    readonly customSSLCert: {
        readonly isString: true;
    };
    readonly webkitResponseTimeout: {
        readonly isNumber: true;
    };
    readonly remoteDebugProxy: {
        readonly isString: true;
    };
    readonly enablePerformanceLogging: {
        readonly isBoolean: true;
    };
    readonly enableAsyncExecuteFromHttps: {
        readonly isBoolean: true;
    };
    readonly fullContextList: {
        readonly isBoolean: true;
    };
    readonly ignoreAboutBlankUrl: {
        readonly isBoolean: true;
    };
    readonly skipLogCapture: {
        readonly isBoolean: true;
    };
    readonly deviceName: {
        readonly isString: true;
    };
    readonly showXcodeLog: {
        readonly isBoolean: true;
    };
    readonly wdaLocalPort: {
        readonly isNumber: true;
    };
    readonly wdaBaseUrl: {
        readonly isString: true;
    };
    readonly iosInstallPause: {
        readonly isNumber: true;
    };
    readonly xcodeConfigFile: {
        readonly isString: true;
    };
    readonly xcodeOrgId: {
        readonly isString: true;
    };
    readonly xcodeSigningId: {
        readonly isString: true;
    };
    readonly keychainPath: {
        readonly isString: true;
    };
    readonly keychainPassword: {
        readonly isString: true;
    };
    readonly bootstrapPath: {
        readonly isString: true;
    };
    readonly agentPath: {
        readonly isString: true;
    };
    readonly scaleFactor: {
        readonly isString: true;
    };
    readonly usePrebuiltWDA: {
        readonly isBoolean: true;
    };
    readonly usePreinstalledWDA: {
        readonly isBoolean: true;
    };
    readonly webDriverAgentUrl: {
        readonly isString: true;
    };
    readonly derivedDataPath: {
        readonly isString: true;
    };
    readonly launchWithIDB: {
        readonly isBoolean: true;
    };
    readonly useNewWDA: {
        readonly isBoolean: true;
    };
    readonly wdaLaunchTimeout: {
        readonly isNumber: true;
    };
    readonly wdaConnectionTimeout: {
        readonly isNumber: true;
    };
    readonly updatedWDABundleId: {
        readonly isString: true;
    };
    readonly resetOnSessionStartOnly: {
        readonly isBoolean: true;
    };
    readonly commandTimeouts: {};
    readonly wdaStartupRetries: {
        readonly isNumber: true;
    };
    readonly wdaStartupRetryInterval: {
        readonly isNumber: true;
    };
    readonly prebuildWDA: {
        readonly isBoolean: true;
    };
    readonly connectHardwareKeyboard: {
        readonly isBoolean: true;
    };
    readonly forceTurnOnSoftwareKeyboardSimulator: {
        readonly isBoolean: true;
    };
    readonly simulatorPasteboardAutomaticSync: {
        readonly isString: true;
    };
    readonly simulatorDevicesSetPath: {
        readonly isString: true;
    };
    readonly calendarAccessAuthorized: {
        readonly isBoolean: true;
    };
    readonly useSimpleBuildTest: {
        readonly isBoolean: true;
    };
    readonly waitForQuiescence: {
        readonly isBoolean: true;
    };
    readonly maxTypingFrequency: {
        readonly isNumber: true;
    };
    readonly nativeTyping: {
        readonly isBoolean: true;
    };
    readonly simpleIsVisibleCheck: {
        readonly isBoolean: true;
    };
    readonly shouldUseSingletonTestManager: {
        readonly isBoolean: true;
    };
    readonly isHeadless: {
        readonly isBoolean: true;
    };
    readonly useXctestrunFile: {
        readonly isBoolean: true;
    };
    readonly absoluteWebLocations: {
        readonly isBoolean: true;
    };
    readonly simulatorWindowCenter: {
        readonly isString: true;
    };
    readonly simulatorStartupTimeout: {
        readonly isNumber: true;
    };
    readonly simulatorTracePointer: {
        readonly isBoolean: true;
    };
    readonly useJSONSource: {
        readonly isBoolean: true;
    };
    readonly enforceFreshSimulatorCreation: {
        readonly isBoolean: true;
    };
    readonly shutdownOtherSimulators: {
        readonly isBoolean: true;
    };
    readonly keychainsExcludePatterns: {
        readonly isString: true;
    };
    readonly showSafariConsoleLog: {
        readonly isBoolean: true;
    };
    readonly showSafariNetworkLog: {
        readonly isBoolean: true;
    };
    readonly safariGarbageCollect: {
        readonly isBoolean: true;
    };
    readonly safariGlobalPreferences: {
        readonly isObject: true;
    };
    readonly safariLogAllCommunication: {
        readonly isBoolean: true;
    };
    readonly safariLogAllCommunicationHexDump: {
        readonly isBoolean: true;
    };
    readonly safariSocketChunkSize: {
        readonly isNumber: true;
    };
    readonly mjpegServerPort: {
        readonly isNumber: true;
    };
    readonly reduceMotion: {
        readonly isBoolean: true;
    };
    readonly reduceTransparency: {
        readonly isBoolean: true;
    };
    readonly mjpegScreenshotUrl: {
        readonly isString: true;
    };
    readonly permissions: {
        readonly isString: true;
    };
    readonly screenshotQuality: {
        readonly isNumber: true;
    };
    readonly wdaEventloopIdleDelay: {
        readonly isNumber: true;
    };
    readonly otherApps: {
        readonly isString: true;
    };
    readonly includeSafariInWebviews: {
        readonly isBoolean: true;
    };
    readonly additionalWebviewBundleIds: {};
    readonly webviewConnectTimeout: {
        readonly isNumber: true;
    };
    readonly iosSimulatorLogsPredicate: {
        readonly isString: true;
    };
    readonly appPushTimeout: {
        readonly isNumber: true;
    };
    readonly nativeWebTapStrict: {
        readonly isBoolean: true;
    };
    readonly safariWebInspectorMaxFrameLength: {
        readonly isNumber: true;
    };
    readonly allowProvisioningDeviceRegistration: {
        readonly isBoolean: true;
    };
    readonly waitForIdleTimeout: {
        readonly isNumber: true;
    };
    readonly resultBundlePath: {
        readonly isString: true;
    };
    readonly resultBundleVersion: {
        readonly isNumber: true;
    };
    readonly safariIgnoreWebHostnames: {
        readonly isString: true;
    };
    readonly includeDeviceCapsToSessionInfo: {
        readonly isBoolean: true;
    };
    readonly disableAutomaticScreenshots: {
        readonly isBoolean: true;
    };
    readonly shouldTerminateApp: {
        readonly isBoolean: true;
    };
    readonly forceAppLaunch: {
        readonly isBoolean: true;
    };
    readonly useNativeCachingStrategy: {
        readonly isBoolean: true;
    };
    readonly appInstallStrategy: {
        readonly isString: true;
        readonly inclusionCaseInsensitive: readonly ["serial", "parallel", "ios-deploy"];
    };
    readonly enforceAppInstall: {
        readonly isBoolean: true;
    }; /**
     * @type {import('@appium/types').Position|null}
     */
}, import("@appium/types").StringRecord<any>, import("@appium/types").StringRecord<any>> implements ExternalDriver<XCUITestDriverConstraints, FullContext | string> {
    static newMethodMap: {
        readonly '/session/:sessionId/timeouts/async_script': {
            readonly POST: {
                readonly command: "asyncScriptTimeout";
                readonly payloadParams: {
                    readonly required: readonly ["ms"];
                };
            };
        };
        readonly '/session/:sessionId/timeouts/implicit_wait': {
            readonly POST: {
                readonly command: "implicitWait";
                readonly payloadParams: {
                    readonly required: readonly ["ms"];
                };
            };
        };
        readonly '/session/:sessionId/window/:windowhandle/size': {
            readonly GET: {
                readonly command: "getWindowSize";
            };
        };
        readonly '/session/:sessionId/element/:elementId/submit': {
            readonly POST: {
                readonly command: "submit";
            };
        };
        readonly '/session/:sessionId/keys': {
            readonly POST: {
                readonly command: "keys";
                readonly payloadParams: {
                    readonly required: readonly ["value"];
                };
            };
        };
        readonly '/session/:sessionId/element/:elementId/location': {
            readonly GET: {
                readonly command: "getLocation";
            };
        };
        readonly '/session/:sessionId/element/:elementId/location_in_view': {
            readonly GET: {
                readonly command: "getLocationInView";
            };
        };
        readonly '/session/:sessionId/element/:elementId/size': {
            readonly GET: {
                readonly command: "getSize";
            };
        };
        readonly '/session/:sessionId/moveto': {
            readonly POST: {
                readonly command: "moveTo";
                readonly payloadParams: {
                    readonly optional: readonly ["element", "xoffset", "yoffset"];
                };
            };
        };
        readonly '/session/:sessionId/touch/click': {
            readonly POST: {
                readonly command: "click";
                readonly payloadParams: {
                    readonly required: readonly ["element"];
                };
            };
        };
        readonly '/session/:sessionId/touch/perform': {
            readonly POST: {
                readonly command: "performTouch";
                readonly payloadParams: {
                    readonly wrap: "actions";
                    readonly required: readonly ["actions"];
                };
            };
        };
        readonly '/session/:sessionId/touch/multi/perform': {
            readonly POST: {
                readonly command: "performMultiAction";
                readonly payloadParams: {
                    readonly required: readonly ["actions"];
                    readonly optional: readonly ["elementId"];
                };
            };
        };
        readonly '/session/:sessionId/appium/device/shake': {
            readonly POST: {
                readonly command: "mobileShake";
            };
        };
        readonly '/session/:sessionId/appium/device/lock': {
            readonly POST: {
                readonly command: "lock";
                readonly payloadParams: {
                    readonly optional: readonly ["seconds"];
                };
            };
        };
        readonly '/session/:sessionId/appium/device/unlock': {
            readonly POST: {
                readonly command: "unlock";
            };
        };
        readonly '/session/:sessionId/appium/device/is_locked': {
            readonly POST: {
                readonly command: "isLocked";
            };
        };
        readonly '/session/:sessionId/appium/start_recording_screen': {
            readonly POST: {
                readonly command: "startRecordingScreen";
                readonly payloadParams: {
                    readonly optional: readonly ["options"];
                };
            };
        };
        readonly '/session/:sessionId/appium/stop_recording_screen': {
            readonly POST: {
                readonly command: "stopRecordingScreen";
                readonly payloadParams: {
                    readonly optional: readonly ["options"];
                };
            };
        };
        readonly '/session/:sessionId/appium/device/app_state': {
            readonly POST: {
                readonly command: "queryAppState";
                readonly payloadParams: {
                    readonly required: readonly [readonly ["appId"], readonly ["bundleId"]];
                };
            };
        };
        readonly '/session/:sessionId/appium/simulator/touch_id': {
            readonly POST: {
                readonly command: "touchId";
                readonly payloadParams: {
                    readonly required: readonly ["match"];
                };
            };
        };
        readonly '/session/:sessionId/appium/simulator/toggle_touch_id_enrollment': {
            readonly POST: {
                readonly command: "toggleEnrollTouchId";
                readonly payloadParams: {
                    readonly optional: readonly ["enabled"];
                };
            };
        };
        readonly '/session/:sessionId/appium/app/launch': {
            readonly POST: {
                readonly command: "launchApp";
            };
        };
        readonly '/session/:sessionId/appium/app/close': {
            readonly POST: {
                readonly command: "closeApp";
            };
        };
        readonly '/session/:sessionId/appium/app/reset': {
            readonly POST: {
                readonly command: "reset";
            };
        };
        readonly '/session/:sessionId/appium/app/background': {
            readonly POST: {
                readonly command: "background";
                readonly payloadParams: {
                    readonly required: readonly ["seconds"];
                };
            };
        };
        readonly '/session/:sessionId/appium/app/strings': {
            readonly POST: {
                readonly command: "getStrings";
                readonly payloadParams: {
                    readonly optional: readonly ["language", "stringFile"];
                };
            };
        };
        readonly '/session/:sessionId/appium/element/:elementId/value': {
            readonly POST: {
                readonly command: "setValueImmediate";
                readonly payloadParams: {
                    readonly required: readonly ["text"];
                };
            };
        };
        readonly '/session/:sessionId/appium/receive_async_response': {
            readonly POST: {
                readonly command: "receiveAsyncResponse";
                readonly payloadParams: {
                    readonly required: readonly ["response"];
                };
            };
        };
        readonly '/session/:sessionId/appium/device/get_clipboard': {
            readonly POST: {
                readonly command: "getClipboard";
                readonly payloadParams: {
                    readonly optional: readonly ["contentType"];
                };
            };
        };
        readonly '/session/:sessionId/appium/device/set_clipboard': {
            readonly POST: {
                readonly command: "setClipboard";
                readonly payloadParams: {
                    readonly required: readonly ["content"];
                    readonly optional: readonly ["contentType", "label"];
                };
            };
        };
    };
    static executeMethodMap: {
        readonly 'mobile: tap': {
            readonly command: "mobileTap";
            readonly params: {
                readonly required: readonly ["x", "y"];
                readonly optional: readonly ["elementId"];
            };
        };
        readonly 'mobile: scroll': {
            readonly command: "mobileScroll";
            readonly params: {
                readonly optional: readonly ["name", "direction", "predicateString", "toVisible", "distance", "elementId"];
            };
        };
        readonly 'mobile: selectPickerWheelValue': {
            readonly command: "mobileSelectPickerWheelValue";
            readonly params: {
                readonly required: readonly ["elementId", "order"];
                readonly optional: readonly ["offset"];
            };
        };
        readonly 'mobile: swipe': {
            readonly command: "mobileSwipe";
            readonly params: {
                readonly required: readonly ["direction"];
                readonly optional: readonly ["velocity", "elementId"];
            };
        };
        readonly 'mobile: pinch': {
            readonly command: "mobilePinch";
            readonly params: {
                readonly required: readonly ["scale", "velocity"];
                readonly optional: readonly ["elementId"];
            };
        };
        readonly 'mobile: doubleTap': {
            readonly command: "mobileDoubleTap";
            readonly params: {
                readonly optional: readonly ["elementId", "x", "y"];
            };
        };
        readonly 'mobile: twoFingerTap': {
            readonly command: "mobileTwoFingerTap";
            readonly params: {
                readonly optional: readonly ["elementId"];
            };
        };
        readonly 'mobile: tapWithNumberOfTaps': {
            readonly command: "mobileTapWithNumberOfTaps";
            readonly params: {
                readonly required: readonly ["numberOfTouches", "numberOfTaps"];
                readonly optional: readonly ["elementId"];
            };
        };
        readonly 'mobile: touchAndHold': {
            readonly command: "mobileTouchAndHold";
            readonly params: {
                readonly required: readonly ["duration"];
                readonly optional: readonly ["x", "y", "elementId"];
            };
        };
        readonly 'mobile: dragFromToForDuration': {
            readonly command: "mobileDragFromToForDuration";
            readonly params: {
                readonly required: readonly ["duration", "fromX", "fromY", "toX", "toY"];
                readonly optional: readonly ["elementId"];
            };
        };
        readonly 'mobile: rotateElement': {
            readonly command: "mobileRotateElement";
            readonly params: {
                readonly required: readonly ["elementId", "rotation", "velocity"];
            };
        };
        readonly 'mobile: dragFromToWithVelocity': {
            readonly command: "mobileDragFromToWithVelocity";
            readonly params: {
                readonly required: readonly ["pressDuration", "holdDuration", "velocity"];
                readonly optional: readonly ["fromElementId", "toElementId", "fromX", "fromY", "toX", "toY"];
            };
        };
        readonly 'mobile: forcePress': {
            readonly command: "mobileForcePress";
            readonly params: {
                readonly optional: readonly ["x", "y", "duration", "pressure", "elementId"];
            };
        };
        readonly 'mobile: scrollToElement': {
            readonly command: "mobileScrollToElement";
            readonly params: {
                readonly required: readonly ["elementId"];
            };
        };
        readonly 'mobile: alert': {
            readonly command: "mobileHandleAlert";
            readonly params: {
                readonly required: readonly ["action"];
                readonly optional: readonly ["buttonLabel"];
            };
        };
        readonly 'mobile: setPasteboard': {
            readonly command: "mobileSetPasteboard";
            readonly params: {
                readonly required: readonly ["content"];
                readonly optional: readonly ["encoding"];
            };
        };
        readonly 'mobile: getPasteboard': {
            readonly command: "mobileGetPasteboard";
            readonly params: {
                readonly optional: readonly ["encoding"];
            };
        };
        readonly 'mobile: source': {
            readonly command: "mobileGetSource";
            readonly params: {
                readonly optional: readonly ["format", "excludedAttributes"];
            };
        };
        readonly 'mobile: getAppStrings': {
            readonly command: "getStrings";
            readonly params: {
                readonly optional: readonly ["language", "stringFile"];
            };
        };
        readonly 'mobile: getContexts': {
            readonly command: "mobileGetContexts";
            readonly params: {
                readonly optional: readonly ["waitForWebviewMs"];
            };
        };
        readonly 'mobile: installApp': {
            readonly command: "mobileInstallApp";
            readonly params: {
                readonly required: readonly ["app"];
                readonly optional: readonly ["strategy", "timeoutMs"];
            };
        };
        readonly 'mobile: isAppInstalled': {
            readonly command: "mobileIsAppInstalled";
            readonly params: {
                readonly required: readonly ["bundleId"];
            };
        };
        readonly 'mobile: removeApp': {
            readonly command: "mobileRemoveApp";
            readonly params: {
                readonly required: readonly ["bundleId"];
            };
        };
        readonly 'mobile: launchApp': {
            readonly command: "mobileLaunchApp";
            readonly params: {
                readonly required: readonly ["bundleId"];
                readonly optional: readonly ["arguments", "environment"];
            };
        };
        readonly 'mobile: terminateApp': {
            readonly command: "mobileTerminateApp";
            readonly params: {
                readonly required: readonly ["bundleId"];
            };
        };
        readonly 'mobile: killApp': {
            readonly command: "mobileKillApp";
            readonly params: {
                readonly required: readonly ["bundleId"];
            };
        };
        readonly 'mobile: queryAppState': {
            readonly command: "mobileQueryAppState";
            readonly params: {
                readonly required: readonly ["bundleId"];
            };
        };
        readonly 'mobile: activateApp': {
            readonly command: "mobileActivateApp";
            readonly params: {
                readonly required: readonly ["bundleId"];
            };
        };
        readonly 'mobile: listApps': {
            readonly command: "mobileListApps";
            readonly params: {
                readonly optional: readonly ["applicationType"];
            };
        };
        readonly 'mobile: viewportScreenshot': {
            readonly command: "getViewportScreenshot";
        };
        readonly 'mobile: viewportRect': {
            readonly command: "getViewportRect";
        };
        readonly 'mobile: startPerfRecord': {
            readonly command: "mobileStartPerfRecord";
            readonly params: {
                readonly optional: readonly ["timeout", "profileName", "pid"];
            };
        };
        readonly 'mobile: stopPerfRecord': {
            readonly command: "mobileStopPerfRecord";
            readonly params: {
                readonly optional: readonly ["remotePath", "user", "pass", "method", "profileName", "headers", "fileFieldName", "formFields"];
            };
        }; /**
         * @type {import('@appium/types').Position|null}
         */
        readonly 'mobile: installCertificate': {
            readonly command: "mobileInstallCertificate";
            /**
             * @type {import('@appium/types').Position|null}
             */
            readonly params: {
                readonly required: readonly ["content"];
                readonly optional: readonly ["commonName", "isRoot"];
            };
        };
        readonly 'mobile: listCertificates': {
            readonly command: "mobileListCertificates";
        };
        readonly 'mobile: startLogsBroadcast': {
            readonly command: "mobileStartLogsBroadcast";
        };
        readonly 'mobile: stopLogsBroadcast': {
            readonly command: "mobileStopLogsBroadcast";
        }; /** @type {((logRecord: {message: string}) => void)|null} */
        readonly 'mobile: batteryInfo': {
            readonly command: "mobileGetBatteryInfo";
        };
        readonly 'mobile: deviceInfo': {
            readonly command: "mobileGetDeviceInfo";
        };
        readonly 'mobile: getDeviceTime': {
            readonly command: "mobileGetDeviceTime";
            readonly params: {
                /**
                 * @type {any|null}
                 * @privateRemarks needs types
                 **/
                readonly optional: readonly ["format"];
            };
        };
        readonly 'mobile: activeAppInfo': {
            readonly command: "mobileGetActiveAppInfo";
        };
        readonly 'mobile: deviceScreenInfo': {
            readonly command: "getScreenInfo";
        };
        readonly 'mobile: pressButton': {
            /** @type {import('./commands/types').WaitingAtoms} */
            readonly command: "mobilePressButton";
            readonly params: {
                readonly required: readonly ["name"];
                readonly optional: readonly ["durationSeconds"];
            };
        };
        readonly 'mobile: enrollBiometric': {
            readonly command: "mobileEnrollBiometric"; /** @type {import('./commands/record-audio').AudioRecorder|null} */
            readonly params: {
                readonly optional: readonly ["isEnabled"];
            };
        };
        readonly 'mobile: sendBiometricMatch': {
            readonly command: "mobileSendBiometricMatch";
            readonly params: {
                readonly optional: readonly ["type", "match"];
            };
        };
        readonly 'mobile: isBiometricEnrolled': {
            readonly command: "mobileIsBiometricEnrolled";
        };
        readonly 'mobile: clearKeychains': {
            readonly command: "mobileClearKeychains";
        };
        readonly 'mobile: getPermission': {
            readonly command: "mobileGetPermission";
            readonly params: {
                readonly required: readonly ["bundleId", "service"];
            };
        };
        readonly 'mobile: setPermission': {
            readonly command: "mobileSetPermissions";
            readonly params: {
                readonly required: readonly ["access", "bundleId"];
            };
        };
        readonly 'mobile: resetPermission': {
            readonly command: "mobileResetPermission";
            readonly params: {
                readonly required: readonly ["service"];
            };
        };
        readonly 'mobile: getAppearance': {
            readonly command: "mobileGetAppearance";
        };
        readonly 'mobile: setAppearance': {
            readonly command: "mobileSetAppearance";
            readonly params: {
                readonly required: readonly ["style"];
            };
        };
        readonly 'mobile: siriCommand': {
            readonly command: "mobileSiriCommand";
            readonly params: {
                readonly required: readonly ["text"];
            };
        };
        readonly 'mobile: pushFile': {
            readonly command: "mobilePushFile";
            readonly params: {
                readonly required: readonly ["remotePath", "payload"];
            };
        };
        readonly 'mobile: pullFile': {
            readonly command: "mobilePullFile";
            readonly params: {
                readonly required: readonly ["remotePath"];
            };
        };
        readonly 'mobile: pullFolder': {
            readonly command: "mobilePullFolder";
            readonly params: {
                readonly required: readonly ["remotePath"];
            };
        };
        readonly 'mobile: deleteFile': {
            readonly command: "mobileDeleteFile";
            readonly params: {
                readonly required: readonly ["remotePath"];
            };
        };
        readonly 'mobile: deleteFolder': {
            readonly command: "mobileDeleteFolder";
            readonly params: {
                readonly required: readonly ["remotePath"];
            };
        };
        readonly 'mobile: runXCTest': {
            readonly command: "mobileRunXCTest";
            readonly params: {
                readonly required: readonly ["testRunnerBundleId", "appUnderTestBundleId", "xctestBundleId"];
                readonly optional: readonly ["args", "testType", "env", "timeout"];
            };
        };
        readonly 'mobile: installXCTestBundle': {
            readonly command: "mobileInstallXCTestBundle";
            readonly params: {
                readonly required: readonly ["xctestApp"];
            };
        };
        readonly 'mobile: listXCTestBundles': {
            readonly command: "mobileListXCTestBundles";
        };
        readonly 'mobile: listXCTestsInTestBundle': {
            readonly command: "mobileListXCTestsInTestBundle";
            readonly params: {
                readonly required: readonly ["bundle"];
            };
        };
        readonly 'mobile: pushNotification': {
            readonly command: "mobilePushNotification";
            readonly params: {
                readonly required: readonly ["bundleId", "payload"];
            };
        };
        readonly 'mobile: expectNotification': {
            readonly command: "mobileExpectNotification";
            readonly params: {
                readonly required: readonly ["name"];
                readonly optional: readonly ["type", "timeoutSeconds"];
            };
        };
        readonly 'mobile: performIoHidEvent': {
            readonly command: "mobilePerformIoHidEvent";
            readonly params: {
                readonly required: readonly ["page", "usage", "durationSeconds"];
            };
        };
        readonly 'mobile: configureLocalization': {
            readonly command: "mobileConfigureLocalization";
            readonly params: {
                readonly optional: readonly ["keyboard", "language", "locale"];
            };
        };
        readonly 'mobile: resetLocationService': {
            readonly command: "mobileResetLocationService";
        };
        readonly 'mobile: startPcap': {
            readonly command: "mobileStartPcap";
            readonly params: {
                readonly optional: readonly ["timeLimitSec", "forceRestart"];
            };
        };
        readonly 'mobile: stopPcap': {
            readonly command: "mobileStopPcap";
        };
        readonly 'mobile: listConditionInducers': {
            readonly command: "listConditionInducers";
        };
        readonly 'mobile: enableConditionInducer': {
            readonly command: "enableConditionInducer";
            readonly params: {
                readonly required: readonly ["conditionID", "profileID"];
            };
        };
        readonly 'mobile: disableConditionInducer': {
            readonly command: "disableConditionInducer";
        };
        readonly 'mobile: updateSafariPreferences': {
            readonly command: "mobileUpdateSafariPreferences";
            readonly params: {
                readonly required: readonly ["preferences"];
            };
        };
        readonly 'mobile: deepLink': {
            readonly command: "mobileDeepLink";
            readonly params: {
                readonly required: readonly ["url"];
                readonly optional: readonly ["bundleId"];
            };
        };
        readonly 'mobile: setSimulatedLocation': {
            readonly command: "mobileSetSimulatedLocation";
            readonly params: {
                readonly required: readonly ["latitude", "longitude"];
            };
        };
        readonly 'mobile: getSimulatedLocation': {
            readonly command: "mobileGetSimulatedLocation";
        };
        readonly 'mobile: resetSimulatedLocation': {
            readonly command: "mobileResetSimulatedLocation";
        };
        readonly 'mobile: shake': {
            readonly command: "mobileShake";
        };
        readonly 'mobile: startAudioRecording': {
            readonly command: "startAudioRecording";
            readonly params: {
                readonly required: readonly ["audioInput"];
                readonly optional: readonly ["timeLimit", "audioCodec", "audioBitrate", "audioChannels", "audioRate", "forceRestart"];
            };
        };
        readonly 'mobile: stopAudioRecording': {
            readonly command: "stopAudioRecording";
        };
        readonly 'mobile: hideKeyboard': {
            readonly command: "mobileHideKeyboard";
            readonly params: {
                readonly optional: readonly ["keys"];
            };
        };
        readonly 'mobile: isKeyboardShown': {
            readonly command: "isKeyboardShown";
        };
        readonly 'mobile: lock': {
            readonly command: "lock";
            readonly params: {
                readonly optional: readonly ["seconds"];
            };
        };
        readonly 'mobile: unlock': {
            readonly command: "unlock";
        };
        readonly 'mobile: isLocked': {
            readonly command: "isLocked";
        };
        readonly 'mobile: backgroundApp': {
            readonly command: "background";
            readonly params: {
                readonly optional: readonly ["seconds"];
            };
        };
    };
    /**
     *
     * @param {XCUITestDriverOpts} opts
     * @param {boolean} shouldValidateCaps
     */
    constructor(opts?: XCUITestDriverOpts, shouldValidateCaps?: boolean);
    /** @type {string|null|undefined} */
    curWindowHandle: string | null | undefined;
    /**
     * @type {boolean|undefined}
     */
    selectingNewPage: boolean | undefined;
    /** @type {string[]} */
    contexts: string[];
    /** @type {string|null} */
    curContext: string | null;
    /**
     * @type {import('@appium/types').Position|null}
     */
    curWebCoords: import('@appium/types').Position | null;
    /**
     * @type {import('@appium/types').Position|null}
     */
    curCoords: import('@appium/types').Position | null;
    /** @type {string[]} */
    curWebFrames: string[];
    /**
     * @type {import('./types').Page[]|undefined}
     */
    windowHandleCache: import('./types').Page[] | undefined;
    /** @type {import('./types').AsyncPromise|undefined} */
    asyncPromise: import('./types').AsyncPromise | undefined;
    /** @type {number|undefined} */
    asyncWaitMs: number | undefined;
    /** @type {((logRecord: {message: string}) => void)|null} */
    _syslogWebsocketListener: ((logRecord: {
        message: string;
    }) => void) | null;
    /** @type {import('./commands/performance').PerfRecorder[]} */
    _perfRecorders: import('./commands/performance').PerfRecorder[];
    /** @type {LRU} */
    webElementsCache: LRU<any, any>;
    /**
     * @type {any|null}
     * @privateRemarks needs types
     **/
    _conditionInducerService: any | null;
    /** @type {boolean|undefined} */
    _isSafariIphone: boolean | undefined;
    /** @type {boolean|undefined} */
    _isSafariNotched: boolean | undefined;
    /** @type {import('./commands/types').WaitingAtoms} */
    _waitingAtoms: import('./commands/types').WaitingAtoms;
    /** @type {import('./types').LifecycleData} */
    lifecycleData: import('./types').LifecycleData;
    /** @type {import('./commands/record-audio').AudioRecorder|null} */
    _audioRecorder: import('./commands/record-audio').AudioRecorder | null;
    /** @type {import('./commands/pcap').TrafficCapture|null} */
    _trafficCapture: import('./commands/pcap').TrafficCapture | null;
    settings: DeviceSettings<{
        nativeWebTap: boolean;
        nativeWebTapStrict: boolean;
        useJSONSource: boolean;
        shouldUseCompactResponses: boolean;
        elementResponseAttributes: string;
        mjpegServerScreenshotQuality: number;
        mjpegServerFramerate: number;
        screenshotQuality: number;
        mjpegScalingFactor: number;
        reduceMotion: null;
    }>;
    logs: {};
    onSettingsUpdate(key: any, value: any): Promise<any>;
    resetIos(): void;
    wda: any;
    jwpProxyActive: boolean | undefined;
    proxyReqRes: any;
    safari: boolean | undefined;
    cachedWdaStatus: any;
    _currentUrl: any;
    xcodeVersion: any;
    asynclibWaitMs: number | undefined;
    pageLoadMs: number | undefined;
    landscapeWebCoordsOffset: number | undefined;
    remote: any;
    get driverData(): {};
    getStatus(): Promise<{
        build: {
            version: string;
        };
    }>;
    driverInfo: {
        built: number;
        version: string;
    } | undefined;
    mergeCliArgsToOpts(): boolean;
    createSession(w3cCaps1: any, w3cCaps2: any, w3cCaps3: any, driverData: any): Promise<[string, import("@appium/types").DriverCaps<{
        readonly platformName: {
            readonly presence: true;
            readonly isString: true;
            readonly inclusionCaseInsensitive: readonly ["iOS", "tvOS"];
        };
        readonly browserName: {
            readonly isString: true;
        };
        readonly app: {
            readonly isString: true;
        };
        readonly calendarFormat: {
            readonly isString: true;
        };
        readonly bundleId: {
            readonly isString: true;
        };
        readonly udid: {
            readonly isString: true;
        };
        readonly autoAcceptAlerts: {
            readonly isBoolean: true;
        };
        readonly autoDismissAlerts: {
            readonly isBoolean: true;
        };
        readonly nativeWebTap: {
            readonly isBoolean: true;
        };
        readonly safariInitialUrl: {
            readonly isString: true;
        };
        readonly safariAllowPopups: {
            readonly isBoolean: true;
        };
        readonly safariIgnoreFraudWarning: {
            readonly isBoolean: true;
        };
        readonly safariOpenLinksInBackground: {
            readonly isBoolean: true;
        };
        readonly safariShowFullResponse: {
            readonly isBoolean: true;
        };
        readonly keepKeyChains: {
            readonly isBoolean: true;
        };
        readonly resetLocationService: {
            readonly isBoolean: true;
        };
        readonly localizableStringsDir: {
            readonly isString: true;
        };
        readonly processArguments: {};
        readonly showIOSLog: {
            readonly isBoolean: true;
        };
        readonly webviewConnectRetries: {
            readonly isNumber: true;
        };
        readonly clearSystemFiles: {
            readonly isBoolean: true;
        };
        readonly customSSLCert: {
            readonly isString: true;
        };
        readonly webkitResponseTimeout: {
            readonly isNumber: true;
        };
        readonly remoteDebugProxy: {
            readonly isString: true;
        };
        readonly enablePerformanceLogging: {
            readonly isBoolean: true;
        };
        readonly enableAsyncExecuteFromHttps: {
            readonly isBoolean: true;
        };
        readonly fullContextList: {
            readonly isBoolean: true;
        };
        readonly ignoreAboutBlankUrl: {
            readonly isBoolean: true;
        };
        readonly skipLogCapture: {
            readonly isBoolean: true;
        };
        readonly deviceName: {
            readonly isString: true;
        };
        readonly showXcodeLog: {
            readonly isBoolean: true;
        };
        readonly wdaLocalPort: {
            readonly isNumber: true;
        };
        readonly wdaBaseUrl: {
            readonly isString: true;
        };
        readonly iosInstallPause: {
            readonly isNumber: true;
        };
        readonly xcodeConfigFile: {
            readonly isString: true;
        };
        readonly xcodeOrgId: {
            readonly isString: true;
        };
        readonly xcodeSigningId: {
            readonly isString: true;
        };
        readonly keychainPath: {
            readonly isString: true;
        };
        readonly keychainPassword: {
            readonly isString: true;
        };
        readonly bootstrapPath: {
            readonly isString: true;
        };
        readonly agentPath: {
            readonly isString: true;
        };
        readonly scaleFactor: {
            readonly isString: true;
        };
        readonly usePrebuiltWDA: {
            readonly isBoolean: true;
        };
        readonly usePreinstalledWDA: {
            readonly isBoolean: true;
        };
        readonly webDriverAgentUrl: {
            readonly isString: true;
        };
        readonly derivedDataPath: {
            readonly isString: true;
        };
        readonly launchWithIDB: {
            readonly isBoolean: true;
        };
        readonly useNewWDA: {
            readonly isBoolean: true;
        };
        readonly wdaLaunchTimeout: {
            readonly isNumber: true;
        };
        readonly wdaConnectionTimeout: {
            readonly isNumber: true;
        };
        readonly updatedWDABundleId: {
            readonly isString: true;
        };
        readonly resetOnSessionStartOnly: {
            readonly isBoolean: true;
        };
        readonly commandTimeouts: {};
        readonly wdaStartupRetries: {
            readonly isNumber: true;
        };
        readonly wdaStartupRetryInterval: {
            readonly isNumber: true;
        };
        readonly prebuildWDA: {
            readonly isBoolean: true;
        };
        readonly connectHardwareKeyboard: {
            readonly isBoolean: true;
        };
        readonly forceTurnOnSoftwareKeyboardSimulator: {
            readonly isBoolean: true;
        };
        readonly simulatorPasteboardAutomaticSync: {
            readonly isString: true;
        };
        readonly simulatorDevicesSetPath: {
            readonly isString: true;
        };
        readonly calendarAccessAuthorized: {
            readonly isBoolean: true;
        };
        readonly useSimpleBuildTest: {
            readonly isBoolean: true;
        };
        readonly waitForQuiescence: {
            readonly isBoolean: true;
        };
        readonly maxTypingFrequency: {
            readonly isNumber: true;
        };
        readonly nativeTyping: {
            readonly isBoolean: true;
        };
        readonly simpleIsVisibleCheck: {
            readonly isBoolean: true;
        };
        readonly shouldUseSingletonTestManager: {
            readonly isBoolean: true;
        };
        readonly isHeadless: {
            readonly isBoolean: true;
        };
        readonly useXctestrunFile: {
            readonly isBoolean: true;
        };
        readonly absoluteWebLocations: {
            readonly isBoolean: true;
        };
        readonly simulatorWindowCenter: {
            readonly isString: true;
        };
        readonly simulatorStartupTimeout: {
            readonly isNumber: true;
        };
        readonly simulatorTracePointer: {
            readonly isBoolean: true;
        };
        readonly useJSONSource: {
            readonly isBoolean: true;
        };
        readonly enforceFreshSimulatorCreation: {
            readonly isBoolean: true;
        };
        readonly shutdownOtherSimulators: {
            readonly isBoolean: true;
        };
        readonly keychainsExcludePatterns: {
            readonly isString: true;
        };
        readonly showSafariConsoleLog: {
            readonly isBoolean: true;
        };
        readonly showSafariNetworkLog: {
            readonly isBoolean: true;
        };
        readonly safariGarbageCollect: {
            readonly isBoolean: true;
        };
        readonly safariGlobalPreferences: {
            readonly isObject: true;
        };
        readonly safariLogAllCommunication: {
            readonly isBoolean: true;
        };
        readonly safariLogAllCommunicationHexDump: {
            readonly isBoolean: true;
        };
        readonly safariSocketChunkSize: {
            readonly isNumber: true;
        };
        readonly mjpegServerPort: {
            readonly isNumber: true;
        };
        readonly reduceMotion: {
            readonly isBoolean: true;
        };
        readonly reduceTransparency: {
            readonly isBoolean: true;
        };
        readonly mjpegScreenshotUrl: {
            readonly isString: true;
        };
        readonly permissions: {
            readonly isString: true;
        };
        readonly screenshotQuality: {
            readonly isNumber: true;
        };
        readonly wdaEventloopIdleDelay: {
            readonly isNumber: true;
        };
        readonly otherApps: {
            readonly isString: true;
        };
        readonly includeSafariInWebviews: {
            readonly isBoolean: true;
        };
        readonly additionalWebviewBundleIds: {};
        readonly webviewConnectTimeout: {
            readonly isNumber: true;
        };
        readonly iosSimulatorLogsPredicate: {
            readonly isString: true;
        };
        readonly appPushTimeout: {
            readonly isNumber: true;
        };
        readonly nativeWebTapStrict: {
            readonly isBoolean: true;
        };
        readonly safariWebInspectorMaxFrameLength: {
            readonly isNumber: true;
        };
        readonly allowProvisioningDeviceRegistration: {
            readonly isBoolean: true;
        };
        readonly waitForIdleTimeout: {
            readonly isNumber: true;
        };
        readonly resultBundlePath: {
            readonly isString: true;
        };
        readonly resultBundleVersion: {
            readonly isNumber: true;
        };
        readonly safariIgnoreWebHostnames: {
            readonly isString: true;
        };
        readonly includeDeviceCapsToSessionInfo: {
            readonly isBoolean: true;
        };
        readonly disableAutomaticScreenshots: {
            readonly isBoolean: true;
        };
        readonly shouldTerminateApp: {
            readonly isBoolean: true;
        };
        readonly forceAppLaunch: {
            readonly isBoolean: true;
        };
        readonly useNativeCachingStrategy: {
            readonly isBoolean: true;
        };
        readonly appInstallStrategy: {
            readonly isString: true;
            readonly inclusionCaseInsensitive: readonly ["serial", "parallel", "ios-deploy"];
        };
        readonly enforceAppInstall: {
            readonly isBoolean: true;
        }; /**
         * @type {import('@appium/types').Position|null}
         */
    }>]>;
    mjpegStream: mjpeg.MJpegStream | undefined;
    /**
     * Returns the default URL for Safari browser
     * @returns {string} The default URL
     */
    getDefaultUrl(): string;
    start(): Promise<void>;
    /**
     * Start WebDriverAgentRunner
     * @param {string} sessionId - The id of the target session to launch WDA with.
     * @param {boolean} realDevice - Equals to true if the test target device is a real device.
     */
    startWda(sessionId: string, realDevice: boolean): Promise<void>;
    /**
     *
     * @param {XCUITestDriverOpts} [opts]
     */
    runReset(opts?: XCUITestDriverOpts | undefined): Promise<void>;
    deleteSession(): Promise<void>;
    stop(): Promise<void>;
    /**
     *
     * @param {string} cmd
     * @param {...any} args
     * @returns {Promise<any>}
     */
    executeCommand(cmd: string, ...args: any[]): Promise<any>;
    configureApp(): Promise<void>;
    /**
     * Unzip the given archive and find a matching .app bundle in it
     *
     * @param {string} appPath The path to the archive.
     * @param {number} depth [0] the current nesting depth. App bundles whose nesting level
     * is greater than 1 are not supported.
     * @returns {Promise<string>} Full path to the first matching .app bundle..
     * @throws If no matching .app bundles were found in the provided archive.
     */
    unzipApp(appPath: string, depth?: number): Promise<string>;
    onPostConfigureApp({ cachedAppInfo, isUrl, appPath }: {
        cachedAppInfo: any;
        isUrl: any;
        appPath: any;
    }): Promise<false | {
        appPath: any;
    }>;
    determineDevice(): Promise<{
        device: any;
        realDevice: boolean;
        udid: any;
    }>;
    startSim(): Promise<void>;
    createSim(): Promise<any>;
    startWdaSession(bundleId: any, processArguments: any): Promise<void>;
    proxyActive(): boolean;
    getProxyAvoidList(): import("@appium/types").RouteMatcher[];
    canProxy(): boolean;
    isSafari(): boolean;
    /**
     *
     * @returns {boolean}
     */
    isRealDevice(): boolean;
    isSimulator(): boolean;
    isTvOS(): boolean;
    validateLocatorStrategy(strategy: any): void;
    checkAutInstallationState(): Promise<{
        install: boolean;
        skipUninstall: boolean;
    }>;
    installAUT(): Promise<void>;
    installOtherApps(otherApps: any): Promise<void>;
    setInitialOrientation(orientation: any): Promise<void>;
    _getCommandTimeout(cmdName: any): any;
    /**
     * Get session capabilities merged with what WDA reports
     * This is a library command but needs to call 'super' so can't be on
     * a helper object
     */
    getSession(): Promise<any>;
    wdaCaps: any;
    deviceCaps: {
        pixelRatio: any;
        statBarHeight: any;
        viewportRect: {
            left: number;
            top: number;
            width: number;
            height: number;
        };
    } | undefined;
    resetOnUnexpectedShutdown: any;
    mobileGetActiveAppInfo: (this: XCUITestDriver) => Promise<any>;
    getAlertText: (this: XCUITestDriver) => Promise<any>;
    setAlertText: (this: XCUITestDriver, value: string) => Promise<any>;
    postAcceptAlert: (this: XCUITestDriver, opts?: {
        buttonLabel?: string | undefined;
    }) => Promise<any>;
    postDismissAlert: (this: XCUITestDriver, opts?: {
        buttonLabel?: string | undefined;
    }) => Promise<any>;
    getAlertButtons: (this: XCUITestDriver) => Promise<any>;
    mobileHandleAlert: (this: XCUITestDriver, action: import("./commands/alert").AlertAction, buttonLabel?: string | undefined) => Promise<any>;
    mobileInstallApp: (this: XCUITestDriver, app: string, timeoutMs?: number | undefined, strategy?: string | undefined) => Promise<void>;
    mobileIsAppInstalled: (this: XCUITestDriver, bundleId: string) => Promise<any>;
    mobileRemoveApp: (this: XCUITestDriver, bundleId: string) => Promise<boolean>;
    mobileLaunchApp: (this: XCUITestDriver, bundleId: string, args?: any, environment?: any) => Promise<any>;
    mobileTerminateApp: (this: XCUITestDriver, bundleId: string) => Promise<any>;
    mobileActivateApp: (this: XCUITestDriver, bundleId: string) => Promise<any>;
    mobileKillApp: (this: XCUITestDriver, bundleId: string) => Promise<boolean>;
    mobileQueryAppState: (this: XCUITestDriver, bundleId: string) => Promise<import("./commands/types").AppState>;
    installApp: (this: XCUITestDriver, appPath: string, { timeoutMs, strategy }?: any) => Promise<void>;
    activateApp: (this: XCUITestDriver, bundleId: string, opts?: any, ...args: any[]) => Promise<any>;
    isAppInstalled: (this: XCUITestDriver, bundleId: string) => Promise<any>;
    terminateApp: (this: XCUITestDriver, bundleId: string) => Promise<any>;
    queryAppState: (this: XCUITestDriver, bundleId: string) => Promise<import("./commands/types").AppState>;
    mobileListApps: (applicationType?: "User" | "System" | undefined) => Promise<Record<string, any>[]>;
    mobileSetAppearance: (this: XCUITestDriver, style: "dark" | "light") => Promise<undefined>;
    mobileGetAppearance: (this: XCUITestDriver) => Promise<{
        style: "dark" | "light" | "unsupported" | "unknown";
    }>;
    mobileGetBatteryInfo: (this: XCUITestDriver) => Promise<import("./commands/types").BatteryInfo>;
    mobileEnrollBiometric: (this: XCUITestDriver, isEnabled?: boolean) => Promise<void>;
    mobileSendBiometricMatch: (this: XCUITestDriver, type?: string, match?: boolean) => Promise<void>;
    mobileIsBiometricEnrolled: (this: XCUITestDriver) => Promise<boolean>;
    mobileInstallCertificate: (this: XCUITestDriver, content: string, commonName?: string | undefined, isRoot?: boolean | undefined) => Promise<string | undefined>;
    mobileListCertificates: (this: XCUITestDriver) => Promise<any>;
    mobileRemoveCertificate: (name: string) => Promise<string>;
    setClipboard: (this: XCUITestDriver, content: string, contentType?: string | undefined) => Promise<void>;
    getClipboard: (this: XCUITestDriver, contentType?: string | undefined) => Promise<string>;
    listConditionInducers: (this: XCUITestDriver) => Promise<import("./commands/condition").Condition[]>;
    enableConditionInducer: (this: XCUITestDriver, conditionID: string, profileID: string) => Promise<boolean>;
    disableConditionInducer: (this: XCUITestDriver) => Promise<boolean>;
    getContexts: (this: XCUITestDriver) => Promise<string[] | import("./commands/context").FullContext[]>;
    getCurrentContext: (this: XCUITestDriver) => Promise<string>;
    getWindowHandle: (this: XCUITestDriver) => Promise<string>;
    getWindowHandles: (this: XCUITestDriver) => Promise<string[]>;
    setContext: (this: XCUITestDriver, name: string | import("./commands/types").Context, callback?: any, skipReadyCheck?: boolean) => Promise<void>;
    setWindow: (this: XCUITestDriver, name: any, skipReadyCheck: any) => Promise<void>;
    activateRecentWebview: (this: XCUITestDriver) => Promise<void>;
    connectToRemoteDebugger: (this: XCUITestDriver) => Promise<void>;
    getContextsAndViews: (this: XCUITestDriver, useUrl?: boolean) => Promise<[import("./commands/types").ViewContext<"NATIVE_APP">]>;
    listWebFrames: (this: XCUITestDriver, useUrl?: boolean) => Promise<any>;
    mobileGetContexts: (this: XCUITestDriver, waitForWebviewMs?: number | undefined) => Promise<import("./commands/types").Context[]>;
    onPageChange: (this: XCUITestDriver, pageChangeNotification: import("./commands/types").PageChangeNotification) => Promise<void>;
    useNewSafari: (this: XCUITestDriver) => any;
    getCurrentUrl: (this: XCUITestDriver) => any;
    getNewRemoteDebugger: (this: XCUITestDriver) => Promise<any>;
    getRecentWebviewContextId: (this: XCUITestDriver, titleRegExp: RegExp, urlRegExp: RegExp) => Promise<string | undefined>;
    isWebContext: (this: XCUITestDriver) => boolean;
    isWebview: (this: XCUITestDriver) => boolean;
    setCurrentUrl: (this: XCUITestDriver, url: any) => void;
    stopRemote: (this: XCUITestDriver, closeWindowBeforeDisconnecting?: boolean) => Promise<void>;
    mobileGetDeviceInfo: (this: XCUITestDriver) => Promise<any>;
    elementDisplayed: (this: XCUITestDriver, el: any) => Promise<any>;
    elementEnabled: (this: XCUITestDriver, el: any) => Promise<any>;
    elementSelected: (this: XCUITestDriver, el: any) => Promise<any>;
    getName: (this: XCUITestDriver, el: any) => Promise<any>;
    getNativeAttribute: (this: XCUITestDriver, attribute: any, el: any) => Promise<string | null>;
    getAttribute: (this: XCUITestDriver, attribute: any, el: any) => Promise<any>;
    getProperty: (this: XCUITestDriver, property: any, el: any) => Promise<any>;
    getText: (this: XCUITestDriver, el: any) => Promise<any>;
    getElementRect: (this: XCUITestDriver, el: any) => Promise<import("@appium/types").Rect>;
    getLocation: (this: XCUITestDriver, elementId: string | import("@appium/types").Element<string>) => Promise<import("@appium/types").Position>;
    getLocationInView: (this: XCUITestDriver, elementId: string | import("@appium/types").Element<string>) => Promise<import("@appium/types").Position>;
    getSize: (this: XCUITestDriver, el: string | import("@appium/types").Element<string>) => Promise<import("@appium/types").Size>;
    /** @deprecated */
    setValueImmediate: (this: XCUITestDriver, value: string, el: string) => Promise<void>;
    setValue: (this: XCUITestDriver, value: any, el: any) => Promise<void>;
    keys: (this: XCUITestDriver, value: string[]) => Promise<void>;
    clear: (this: XCUITestDriver, el: any) => Promise<void>;
    getContentSize: (this: XCUITestDriver, el: any) => Promise<string>;
    getNativeRect: (this: XCUITestDriver, el: any) => Promise<import("@appium/types").Rect>;
    COMMAND_MAP: any;
    receiveAsyncResponse: (this: XCUITestDriver, status: any, value: any) => Promise<void>;
    execute: <TArgs extends import("./commands/execute").ExecuteMethodArgs = unknown[], TReturn = unknown>(this: XCUITestDriver, script: string, args?: TArgs | undefined) => Promise<TReturn>;
    executeAsync: (this: XCUITestDriver, script: any, args: any) => Promise<any>;
    executeMobile: any;
    pushFile: (this: XCUITestDriver, remotePath: string, base64Data: string) => Promise<void>;
    mobilePushFile: (this: XCUITestDriver, remotePath: string, payload: string) => Promise<void>;
    pullFile: (this: XCUITestDriver, remotePath: string) => Promise<string>;
    mobilePullFile: (this: XCUITestDriver, remotePath: string) => Promise<string>;
    mobileDeleteFolder: (this: XCUITestDriver, remotePath: string) => Promise<void>;
    mobileDeleteFile: (this: XCUITestDriver, remotePath: string) => Promise<void>;
    pullFolder: (this: XCUITestDriver, remotePath: string) => Promise<string>;
    mobilePullFolder: (this: XCUITestDriver, remotePath: string) => Promise<string>;
    findElOrEls: (this: XCUITestDriver, strategy: any, selector: any, mult: any, context: any) => Promise<any>;
    findNativeElementOrElements: (this: XCUITestDriver, strategy: any, selector: any, mult: any, context: any) => Promise<any>;
    doNativeFind: (this: XCUITestDriver, strategy: any, selector: any, mult: any, context: any) => Promise<import("@appium/types").Element<string>[] | undefined>;
    getFirstVisibleChild: (this: XCUITestDriver, mult: any, context: any) => Promise<import("@appium/types").Element<string>[] | undefined>;
    active: (this: XCUITestDriver) => Promise<any>;
    background: (this: XCUITestDriver, seconds?: number | {
        timeout: number | null;
    } | undefined) => Promise<any>;
    touchId: (this: XCUITestDriver, match?: boolean) => Promise<void>;
    toggleEnrollTouchId: (this: XCUITestDriver, isEnabled?: boolean) => Promise<void>;
    getWindowSize: (this: XCUITestDriver, windowHandle?: string) => Promise<any>;
    getDeviceTime: (this: XCUITestDriver, format?: string | undefined) => Promise<string>;
    mobileGetDeviceTime: (this: XCUITestDriver, format?: string) => Promise<string>;
    getWindowRect: (this: XCUITestDriver) => Promise<{
        width: any;
        height: any;
        x: number;
        y: number;
    }>;
    getStrings: (this: XCUITestDriver, language: string, stringFile?: string | null) => Promise<{}>;
    removeApp: (this: XCUITestDriver, bundleId: any) => Promise<boolean>;
    launchApp: (this: XCUITestDriver) => Promise<void>;
    closeApp: (this: XCUITestDriver) => Promise<void>;
    setUrl: (this: XCUITestDriver, url: any) => Promise<void>;
    getViewportRect: (this: XCUITestDriver) => Promise<{
        left: number;
        top: number;
        width: number;
        height: number;
    }>;
    getScreenInfo: (this: XCUITestDriver) => Promise<any>;
    getStatusBarHeight: (this: XCUITestDriver) => Promise<any>;
    getDevicePixelRatio: (this: XCUITestDriver) => Promise<any>;
    mobilePressButton: (this: XCUITestDriver, name: string, durationSeconds?: number | undefined) => Promise<any>;
    mobileSiriCommand: (this: XCUITestDriver, text: string) => Promise<any>;
    getWindowSizeWeb: (this: XCUITestDriver) => Promise<any>;
    getWindowSizeNative: (this: XCUITestDriver) => Promise<any>;
    mobileGetSimulatedLocation: () => Promise<import("./commands/geolocation").GeolocationInfo>;
    mobileSetSimulatedLocation: (opts: import("./commands/geolocation").GeolocationInfo) => Promise<any>;
    mobileResetSimulatedLocation: () => Promise<any>;
    moveTo: (this: XCUITestDriver, el: string | import("@appium/types").Element<string>, xoffset?: number, yoffset?: number) => Promise<void>;
    mobileShake: (this: XCUITestDriver) => Promise<void>;
    click: (this: XCUITestDriver, el: any) => Promise<any>;
    releaseActions: (this: XCUITestDriver) => Promise<void>;
    performActions: (this: XCUITestDriver, actions: any) => Promise<any>;
    performTouch: (this: XCUITestDriver, gestures: any[]) => Promise<any>;
    performMultiAction: (this: XCUITestDriver, actions: any[]) => Promise<any>;
    nativeClick: (this: XCUITestDriver, el: string | import("@appium/types").Element<string>) => Promise<any>;
    mobileScrollToElement: (this: XCUITestDriver, elementId: string | import("@appium/types").Element<string>) => Promise<any>;
    mobileScroll: (this: XCUITestDriver, name?: string | undefined, direction?: import("./commands/types").Direction | undefined, predicateString?: string | undefined, toVisible?: boolean | undefined, distance?: number | undefined, elementId?: string | import("@appium/types").Element<string> | undefined) => Promise<any>;
    mobileSwipe: (this: XCUITestDriver, direction: import("./commands/types").Direction, velocity?: number | undefined, elementId?: string | import("@appium/types").Element<string> | undefined) => Promise<any>;
    mobilePinch: (this: XCUITestDriver, scale: number, velocity: number, elementId?: string | import("@appium/types").Element<string> | undefined) => Promise<any>;
    mobileDoubleTap: (this: XCUITestDriver, elementId?: string | import("@appium/types").Element<string> | undefined, x?: number | undefined, y?: number | undefined) => Promise<any>;
    mobileTwoFingerTap: (this: XCUITestDriver, elementId?: string | import("@appium/types").Element<string> | undefined) => Promise<any>;
    mobileTouchAndHold: (this: XCUITestDriver, duration: number, x?: number | undefined, y?: number | undefined, elementId?: string | import("@appium/types").Element<string> | undefined) => Promise<any>;
    mobileTap: (this: XCUITestDriver, x: number, y: number, elementId?: string | import("@appium/types").Element<string> | undefined) => Promise<any>;
    mobileDragFromToForDuration: (this: XCUITestDriver, duration: number, fromX: number, fromY: number, toX: number, toY: number, elementId?: string | import("@appium/types").Element<string> | undefined) => Promise<any>;
    mobileDragFromToWithVelocity: (this: XCUITestDriver, pressDuration: number, holdDuration: number, velocity: number, fromElementId?: string | import("@appium/types").Element<string> | undefined, toElementId?: string | import("@appium/types").Element<string> | undefined, fromX?: number | undefined, fromY?: number | undefined, toX?: number | undefined, toY?: number | undefined) => Promise<any>;
    mobileTapWithNumberOfTaps: (this: XCUITestDriver, elementId: string | import("@appium/types").Element<string>, numberOfTaps: number, numberOfTouches: number) => Promise<any>;
    mobileForcePress: (this: XCUITestDriver, x: number, y: number, duration: number, pressure: number, elementId?: string | import("@appium/types").Element<string> | undefined) => Promise<any>;
    mobileSelectPickerWheelValue: (this: XCUITestDriver, elementId: string | import("@appium/types").Element<string>, order: "next" | "previous", offset?: number | undefined) => Promise<any>;
    mobileRotateElement: (this: XCUITestDriver, elementId: string | import("@appium/types").Element<string>, rotation: number, velocity: number) => Promise<any>;
    getCoordinates: (this: XCUITestDriver, gesture: any) => Promise<{
        x: number;
        y: number;
        areOffsets: boolean;
    }>;
    applyMoveToOffset: (this: XCUITestDriver, firstCoordinates: any, secondCoordinates: any) => any;
    mobilePerformIoHidEvent: (this: XCUITestDriver, page: string | number, usage: string | number, durationSeconds: string | number) => Promise<any>;
    mobileClearKeychains: (this: XCUITestDriver) => Promise<void>;
    hideKeyboard: (this: XCUITestDriver, strategy: any, ...possibleKeys: any[]) => Promise<void>;
    mobileHideKeyboard: (this: XCUITestDriver, keys?: string[]) => Promise<void>;
    isKeyboardShown: (this: XCUITestDriver) => Promise<boolean>;
    mobileConfigureLocalization: (this: XCUITestDriver, keyboard?: import("./commands/localization").KeyboardOptions | undefined, language?: import("./commands/localization").LanguageOptions | undefined, locale?: import("./commands/localization").LocaleOptions | undefined) => Promise<boolean>;
    getGeoLocation: (this: XCUITestDriver) => Promise<{
        latitude: number;
        longitude: number;
        altitude: number;
    }>;
    setGeoLocation: (this: XCUITestDriver, location: Partial<import("@appium/types").Location>) => Promise<void>;
    mobileResetLocationService: (this: XCUITestDriver) => Promise<void>;
    lock: (this: XCUITestDriver, seconds?: string | number | undefined) => Promise<void>;
    unlock: (this: XCUITestDriver) => Promise<void>;
    isLocked: (this: XCUITestDriver) => Promise<boolean>;
    extractLogs: (this: XCUITestDriver, logType: string, logsContainer?: Partial<Record<string, {
        getLogs(): Promise<any>;
    }>> | undefined) => Promise<any>;
    supportedLogTypes: import("@appium/types").LogDefRecord;
    startLogCapture: (this: XCUITestDriver) => Promise<boolean>;
    mobileStartLogsBroadcast: (this: XCUITestDriver) => Promise<void>;
    mobileStopLogsBroadcast: (this: XCUITestDriver) => Promise<void>;
    back: (this: XCUITestDriver) => Promise<void>;
    forward: (this: XCUITestDriver) => Promise<void>;
    closeWindow: (this: XCUITestDriver) => Promise<any>;
    nativeBack: (this: XCUITestDriver) => Promise<void>;
    mobileDeepLink: (this: XCUITestDriver, url: string, bundleId?: string | undefined) => Promise<any>;
    mobilePushNotification: (this: XCUITestDriver, bundleId: string, payload: import("./commands/notifications").PushPayload) => Promise<any>;
    mobileExpectNotification: (this: XCUITestDriver, name: string, type?: import("./commands/notifications").NotificationType, timeoutSeconds?: number) => Promise<any>;
    mobileSetPasteboard: (this: XCUITestDriver, content: string, encoding?: string) => Promise<any>;
    mobileGetPasteboard: (this: XCUITestDriver, encoding?: string) => Promise<any>;
    mobileStartPcap: (this: XCUITestDriver, timeLimitSec?: number, forceRestart?: boolean) => Promise<void>;
    mobileStopPcap: (this: XCUITestDriver) => Promise<string>;
    mobileStartPerfRecord: (this: XCUITestDriver, timeout?: number, profileName?: string, pid?: number | "current" | undefined) => Promise<void>;
    mobileStopPerfRecord: (this: XCUITestDriver, remotePath?: string | undefined, user?: string | undefined, pass?: string | undefined, method?: import("axios").Method | undefined, profileName?: string, headers?: Record<string, any> | undefined, fileFieldName?: string | undefined, formFields?: [string, any][] | Record<string, any> | undefined) => Promise<string>;
    mobileResetPermission: (this: XCUITestDriver, service: number | "calendar" | "camera" | "contacts" | "health" | "homekit" | "keyboardnet" | "location" | "medialibrary" | "microphone" | "photos" | "reminders" | "systemroot" | "userdesktop" | "userdocuments" | "userdownloads" | "bluetooth") => Promise<void>;
    mobileGetPermission: (this: XCUITestDriver, bundleId: string, service: import("./commands/permissions").GetPermissionService) => Promise<"yes" | "no" | "unset" | "limited">;
    mobileSetPermissions: (this: XCUITestDriver, access: Record<Partial<import("./commands/permissions").AccessRule>, import("./commands/permissions").PermissionState>, bundleId: string) => Promise<void>;
    proxyCommand: (this: XCUITestDriver, endpoint: string, method: import("./commands/proxy-helper").AllowedHttpMethod, body?: any, isSessionCommand?: boolean) => Promise<any>;
    startAudioRecording: (this: XCUITestDriver, audioInput: string | number, timeLimit?: string | number, audioCodec?: string, audioBitrate?: string, audioChannels?: string | number, audioRate?: string | number, forceRestart?: boolean) => Promise<void>;
    stopAudioRecording: (this: XCUITestDriver) => Promise<string>;
    _recentScreenRecorder: import("./commands/recordscreen").ScreenRecorder | null;
    startRecordingScreen: (this: XCUITestDriver, options?: import("./commands/types").StartRecordingScreenOptions | undefined) => Promise<string>;
    stopRecordingScreen: (this: XCUITestDriver, options?: import("./commands/types").StopRecordingScreenOptions) => Promise<string | null>;
    getScreenshot: (this: XCUITestDriver) => Promise<any>;
    getElementScreenshot: (this: XCUITestDriver, el: any) => Promise<any>;
    getViewportScreenshot: (this: XCUITestDriver) => Promise<any>;
    getPageSource: (this: XCUITestDriver) => Promise<any>;
    getNativePageSource: (this: XCUITestDriver) => Promise<any>;
    mobileGetSource: (this: XCUITestDriver, format?: "xml" | "json" | undefined, excludedAttributes?: any) => Promise<any>;
    pageLoadTimeoutW3C: (this: XCUITestDriver, ms: any) => Promise<void>;
    pageLoadTimeoutMJSONWP: (this: XCUITestDriver, ms: any) => Promise<void>;
    scriptTimeoutW3C: (this: XCUITestDriver, ms: any) => Promise<void>;
    asyncScriptTimeout: (this: XCUITestDriver, ms: number) => Promise<void>;
    setPageLoadTimeout: (this: XCUITestDriver, ms: any) => void;
    setAsyncScriptTimeout: (this: XCUITestDriver, ms: any) => void;
    setFrame: (this: XCUITestDriver, frame: any) => Promise<void>;
    getCssProperty: (this: XCUITestDriver, propertyName: any, el: any) => Promise<any>;
    submit: (this: XCUITestDriver, el: string | import("@appium/types").Element<string>) => Promise<void>;
    refresh: (this: XCUITestDriver) => Promise<void>;
    getUrl: (this: XCUITestDriver) => Promise<any>;
    title: (this: XCUITestDriver) => Promise<any>;
    getCookies: (this: XCUITestDriver) => Promise<any>;
    setCookie: (this: XCUITestDriver, cookie: any) => Promise<void>;
    deleteCookie: (this: XCUITestDriver, cookieName: any) => Promise<void>;
    deleteCookies: (this: XCUITestDriver) => Promise<void>;
    _deleteCookie: (this: XCUITestDriver, cookie: any) => Promise<any>;
    cacheWebElement: (this: XCUITestDriver, el: any) => any;
    cacheWebElements: (this: XCUITestDriver, response: any) => any;
    executeAtom: (this: XCUITestDriver, atom: string, args: unknown[], alwaysDefaultFrame?: boolean) => Promise<any>;
    executeAtomAsync: (this: XCUITestDriver, atom: any, args: any, responseUrl: any) => Promise<any>;
    getAtomsElement: <S extends string>(this: XCUITestDriver, elOrId: S | import("@appium/types").Element<S>) => import("./commands/types").AtomsElement<S>;
    convertElementsForAtoms: (this: XCUITestDriver, args?: readonly any[] | undefined) => any;
    getElementId: (element: any) => any;
    hasElementId: (element: any) => element is import("@appium/types").Element<string>;
    findWebElementOrElements: (this: XCUITestDriver, strategy: any, selector: any, many: any, ctx: any) => Promise<any>;
    clickWebCoords: (this: XCUITestDriver) => Promise<void>;
    getSafariIsIphone: (this: XCUITestDriver) => Promise<boolean>;
    getSafariDeviceSize: (this: XCUITestDriver) => Promise<{
        width: number;
        height: number;
    }>;
    getSafariIsNotched: (this: XCUITestDriver) => Promise<boolean>;
    getExtraTranslateWebCoordsOffset: (this: XCUITestDriver, wvPos: any, realDims: any) => Promise<void>;
    getExtraNativeWebTapOffset: (this: XCUITestDriver, isIphone: any, bannerVisibility: any) => Promise<number>;
    nativeWebTap: (this: XCUITestDriver, el: any) => Promise<void>;
    translateWebCoords: (this: XCUITestDriver, coords: any) => Promise<{
        x: any;
        y: any;
    } | undefined>;
    checkForAlert: (this: XCUITestDriver) => Promise<boolean>;
    waitForAtom: (this: XCUITestDriver, promise: Promise<any>) => Promise<any>;
    mobileWebNav: (this: XCUITestDriver, navType: string) => Promise<void>;
    mobileUpdateSafariPreferences: (this: XCUITestDriver, preferences: any) => Promise<void>;
    clickCoords: (this: XCUITestDriver, coords: any) => Promise<void>;
    mobileRunXCTest: (this: XCUITestDriver, testRunnerBundleId: string, appUnderTestBundleId: string, xcTestBundleId: string, args?: string[], testType?: "app" | "ui" | "logic", env?: any, timeout?: number) => Promise<import("./commands/xctest").RunXCUITestResponse>;
    mobileInstallXCTestBundle: (this: XCUITestDriver, xctestApp: string) => Promise<void>;
    mobileListXCTestBundles: (this: XCUITestDriver) => Promise<string[]>;
    mobileListXCTestsInTestBundle: (this: XCUITestDriver, bundle: string) => Promise<string[]>;
}
import { desiredCapConstraints } from "./desired-caps";
import { BaseDriver } from "@appium/base-driver";
import LRU from "lru-cache";
import { DeviceSettings } from "@appium/base-driver";
import { mjpeg } from "@appium/support";
//# sourceMappingURL=driver.d.ts.map