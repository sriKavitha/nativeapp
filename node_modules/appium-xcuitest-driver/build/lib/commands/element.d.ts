declare namespace _default {
    /**
     * @this {XCUITestDriver}
     */
    function elementDisplayed(this: import("../driver").default, el: any): Promise<any>;
    /**
     * @this {XCUITestDriver}
     */
    function elementEnabled(this: import("../driver").default, el: any): Promise<any>;
    /**
     * @this {XCUITestDriver}
     */
    function elementSelected(this: import("../driver").default, el: any): Promise<any>;
    /**
     * @this {XCUITestDriver}
     */
    function getName(this: import("../driver").default, el: any): Promise<any>;
    /**
     * @this {XCUITestDriver}
     */
    function getNativeAttribute(this: import("../driver").default, attribute: any, el: any): Promise<string | null>;
    /**
     * @this {XCUITestDriver}
     */
    function getAttribute(this: import("../driver").default, attribute: any, el: any): Promise<any>;
    /**
     * @this {XCUITestDriver}
     */
    function getProperty(this: import("../driver").default, property: any, el: any): Promise<any>;
    /**
     * @this {XCUITestDriver}
     */
    function getText(this: import("../driver").default, el: any): Promise<any>;
    /**
     * @this {XCUITestDriver}
     * @returns {Promise<import('@appium/types').Rect>}
     */
    function getElementRect(this: import("../driver").default, el: any): Promise<import("@appium/types").Rect>;
    /**
     * Get the position of an element on screen
     *
     * @param {string|Element} elementId - the element ID
     * @returns {Promise<Position>} The position of the element
     * @deprecated Use {@linkcode XCUITestDriver.getElementRect} instead
     * @this {XCUITestDriver}
     */
    function getLocation(this: import("../driver").default, elementId: string | import("@appium/types").Element<string>): Promise<import("@appium/types").Position>;
    /**
     * Alias for {@linkcode XCUITestDriver.getLocation}
     * @param {string|Element} elementId - the element ID
     * @returns {Promise<Position>} The position of the element
     * @deprecated Use {@linkcode XCUITestDriver.getElementRect} instead
     * @this {XCUITestDriver}
     */
    function getLocationInView(this: import("../driver").default, elementId: string | import("@appium/types").Element<string>): Promise<import("@appium/types").Position>;
    /**
     * Get the size of an element
     * @param {string|Element} el - the element ID
     * @returns {Promise<Size>} The position of the element
     * @this {XCUITestDriver}
     */
    function getSize(this: import("../driver").default, el: string | import("@appium/types").Element<string>): Promise<import("@appium/types").Size>;
    /**
     * Alias for {@linkcode setValue}
     *
     * @param {string} value - the value to set
     * @param {string} el - the element to set the value of
     * @deprecated
     * @this {XCUITestDriver}
     */
    function setValueImmediate(this: import("../driver").default, value: string, el: string): Promise<void>;
    /**
     * @this {XCUITestDriver}
     */
    function setValue(this: import("../driver").default, value: any, el: any): Promise<void>;
    /**
     * Send keys to the app
     * @param {string[]} value - Array of keys to send
     * @this {XCUITestDriver}
     * @deprecated Use {@linkcode XCUITestDriver.setValue} instead
     */
    function keys(this: import("../driver").default, value: string[]): Promise<void>;
    /**
     * @this {XCUITestDriver}
     */
    function clear(this: import("../driver").default, el: any): Promise<void>;
    /**
     * @this {XCUITestDriver}
     */
    function getContentSize(this: import("../driver").default, el: any): Promise<string>;
    /**
     * @this {XCUITestDriver}
     * @returns {Promise<import('@appium/types').Rect>}
     */
    function getNativeRect(this: import("../driver").default, el: any): Promise<import("@appium/types").Rect>;
}
export default _default;
export type XCUITestDriver = import('../driver').XCUITestDriver;
export type Element = import('@appium/types').Element;
export type Position = import('@appium/types').Position;
export type Size = import('@appium/types').Size;
//# sourceMappingURL=element.d.ts.map