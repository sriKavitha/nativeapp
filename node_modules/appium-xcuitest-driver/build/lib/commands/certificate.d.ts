export function parseCommonName(stringCertificate: any): string;
declare namespace _default {
    /**
     * Installs a custom certificate onto the device.
     * Since Xcode SDK 11.4 Apple has added a dedicated simctl subcommand to quickly handle
     * certificates on Simulator over CLI.
     * On real devices or simulators before Xcode 11.4 SDK
     * Apple provides no official way to do it via the command line.
     * In such case (and also as a fallback if CLI setup fails)
     * this method tries to wrap the certificate into .mobileconfig format
     * and then deploys the wrapped file to the internal HTTP server,
     * so one can open it via mobile Safari.
     * Then the algorithm goes through the profile installation procedure by
     * clicking the necessary buttons using WebDriverAgent.
     *
     * @param {string} content
     * @param {string} [commonName]
     * @param {boolean} [isRoot=true]
     * @returns {Promise<string|undefined>} The content of the generated .mobileconfig file as
     * base64-encoded string. This config might be useful for debugging purposes.
     * If the certificate has been successfully set via CLI then nothing is returned.
     * @this {XCUITestDriver}
     */
    function mobileInstallCertificate(this: import("../driver").default, content: string, commonName?: string | undefined, isRoot?: boolean | undefined): Promise<string | undefined>;
    /**
     * Removes installed certificates for real devices only
     * if [py-ios-device](https://github.com/YueChen-C/py-ios-device) tool
     * is available on the server machine.
     *
     * @param {string} name - Name of certificate to remove
     * @returns {Promise<string>} Returns status acknowledgment status if
     * tht certificate is successfully removed or 'None' (basically just
     * forwards the original pyidevice output)
     * @throws {Error} If attempting to remote certificates for simulated device or if py-ios-device
     * is not installed
     * @group Real Device Only
     */
    function mobileRemoveCertificate(name: string): Promise<string>;
    /**
     * Lists installed certificates for real devices only
     * if [py-ios-device](https://github.com/YueChen-C/py-ios-device) tool
     * is available on the server machine.
     *
     * @returns {Promise<object>} Returns map of certificates installed on the real device
     * @throws {Error} If attempting to list certificates for simulated device or if py-ios-device
     * is not installed
     * @this {XCUITestDriver}
     */
    function mobileListCertificates(this: import("../driver").default): Promise<any>;
}
export default _default;
export type XCUITestDriver = import('../driver').XCUITestDriver;
//# sourceMappingURL=certificate.d.ts.map