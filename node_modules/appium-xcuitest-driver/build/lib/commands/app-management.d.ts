declare namespace _default {
    /**
     * @param {string} app
     * @param {string} [strategy]
     * @param {number} [timeoutMs]
     * @this {XCUITestDriver}
     */
    function mobileInstallApp(this: import("../driver").default, app: string, timeoutMs?: number | undefined, strategy?: string | undefined): Promise<void>;
    /**
     * @param {string} bundleId
     * @this {XCUITestDriver}
     */
    function mobileIsAppInstalled(this: import("../driver").default, bundleId: string): Promise<any>;
    /**
     * @param {string} bundleId
     * @this {XCUITestDriver}
     */
    function mobileRemoveApp(this: import("../driver").default, bundleId: string): Promise<boolean>;
    /**
     * @param {string} bundleId
     * @param {any|any[]} [args]
     * @param {any} [environment]
     * @this {XCUITestDriver}
     */
    function mobileLaunchApp(this: import("../driver").default, bundleId: string, args?: any, environment?: any): Promise<any>;
    /**
     * @param {string} bundleId
     * @this {XCUITestDriver}
     */
    function mobileTerminateApp(this: import("../driver").default, bundleId: string): Promise<any>;
    /**
     * @param {string} bundleId
     * @this {XCUITestDriver}
     */
    function mobileActivateApp(this: import("../driver").default, bundleId: string): Promise<any>;
    /**
     * Kill the given bundle id process via instruments service.
     * @see https://github.com/YueChen-C/py-ios-device/blob/51f4683c5c3c385a015858ada07a5f1c62d3cf57/ios_device/cli/base.py#L220
     * @param {string} bundleId
     * @returns {Promise<boolean>} Returns true if the bundle id process was killed. Otherwise false.
     * @this {XCUITestDriver}
     */
    function mobileKillApp(this: import("../driver").default, bundleId: string): Promise<boolean>;
    /**
     * Returns the current application state
     *
     * @param {string} bundleId - Options set, which must contain `bundleId` property
     * @returns {Promise<import('./types').AppState>} The actual application state code. See
     * https://developer.apple.com/documentation/xctest/xcuiapplicationstate?language=objc
     * to get the list of possible values.
     * @this {XCUITestDriver}
     */
    function mobileQueryAppState(this: import("../driver").default, bundleId: string): Promise<import("./types").AppState>;
    /**
     * @param {string} appPath
     * @param {object} opts
     * @this {XCUITestDriver}
     */
    function installApp(this: import("../driver").default, appPath: string, { timeoutMs, strategy }?: any): Promise<void>;
    /**
     * @param {string} bundleId
     * @param {object} opts
     * @this {XCUITestDriver}
     */
    function activateApp(this: import("../driver").default, bundleId: string, opts?: any, ...args: any[]): Promise<any>;
    /**
     * @param {string} bundleId
     * @this {XCUITestDriver}
     */
    function isAppInstalled(this: import("../driver").default, bundleId: string): Promise<any>;
    /**
     * @param {string} bundleId
     * @this {XCUITestDriver}
     */
    function terminateApp(this: import("../driver").default, bundleId: string): Promise<any>;
    /**
     * @param {string} bundleId
     * @this {XCUITestDriver}
     */
    function queryAppState(this: import("../driver").default, bundleId: string): Promise<import("./types").AppState>;
    /**
     * List applications installed on the real device under test
     *
     * @param {'User'|'System'} [applicationType='User']
     * @returns {Promise<Record<string,any>[]>} A list of apps, where each item is a map where keys are
     * bundle identifiers and values are maps of platform-specific app properties.
     */
    function mobileListApps(applicationType?: "User" | "System" | undefined): Promise<Record<string, any>[]>;
    /**
     * Close app (simulate device home button). It is possible to restore
     * the app after the timeout or keep it minimized based on the parameter value.
     *
     * @param {number|{timeout: number?}} [seconds]
     * - any positive number of seconds: come back after X seconds
     * - any negative number of seconds or zero: never come back
     * - undefined/null: never come back
     * - {timeout: 5000}: come back after 5 seconds
     * - {timeout: null}, {timeout: -2}: never come back
     * @this {XCUITestDriver}
     */
    function background(this: import("../driver").default, seconds?: number | {
        timeout: number | null;
    } | undefined): Promise<any>;
}
export default _default;
export type XCUITestDriver = import('../driver').XCUITestDriver;
//# sourceMappingURL=app-management.d.ts.map