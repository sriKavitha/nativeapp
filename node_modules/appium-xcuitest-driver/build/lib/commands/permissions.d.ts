export namespace RESOURCE_NAME_TO_ID_MAP {
    const calendar: number;
    const camera: number;
    const contacts: number;
    const health: number;
    const homekit: number;
    const keyboardnet: number;
    const location: number;
    const medialibrary: number;
    const microphone: number;
    const photos: number;
    const reminders: number;
    const systemroot: number;
    const userdesktop: number;
    const userdocuments: number;
    const userdownloads: number;
    const bluetooth: number;
}
declare namespace _default {
    /**
     * Resets the given permission for the active application under test.
     * Works for both Simulator and real devices using Xcode SDK 11.4+
     *
     * @param {keyof typeof RESOURCE_NAME_TO_ID_MAP|number} service - One of the available service names. This could also be an integer protected resource identifier; see [this list](https://developer.apple.com/documentation/xctest/xcuiprotectedresource?language=objc)
     * @throws {Error} If permission reset fails on the device.
     * @this {XCUITestDriver}
     */
    function mobileResetPermission(this: import("../driver").default, service: number | "calendar" | "camera" | "contacts" | "health" | "homekit" | "keyboardnet" | "location" | "medialibrary" | "microphone" | "photos" | "reminders" | "systemroot" | "userdesktop" | "userdocuments" | "userdownloads" | "bluetooth"): Promise<void>;
    /**
     * Gets application permission state on Simulator.
     *
     * This method requires WIX applesimutils to be installed on the server host.
     *
     * @param {GetPermissionService} service - Service name
     * @param {string} bundleId - Bundle identifier of the target application
     * @returns {Promise<'yes'|'no'|'unset'|'limited'>} Either 'yes', 'no', 'unset' or 'limited'
     * @throws {Error} If permission getting fails or the device is not a Simulator.
     * @this {XCUITestDriver}
     * @group Simulator Only
     */
    function mobileGetPermission(this: import("../driver").default, bundleId: string, service: GetPermissionService): Promise<"yes" | "no" | "unset" | "limited">;
    /**
     * Set application permission state on Simulator.
     *
     * @param {Record<Partial<AccessRule>, PermissionState>} access - One or more access rules to set.
     * @param {string} bundleId - Bundle identifier of the target application
     * @since Xcode SDK 11.4
     * @throws {Error} If permission setting fails or the device is not a Simulator.
     * @group Simulator Only
     * @this {XCUITestDriver}
     */
    function mobileSetPermissions(this: import("../driver").default, access: Record<Partial<AccessRule>, PermissionState>, bundleId: string): Promise<void>;
}
export default _default;
export type XCUITestDriver = import('../driver').XCUITestDriver;
/**
 * Access rules for the `mobile: setPermission` execute method.
 *
 * Details:
 *
 * - `all`: Apply the action to all services.
 * - `calendar`: Allow access to calendar.
 * - `contacts-limited`: Allow access to basic contact info.
 * - `contacts`: Allow access to full contact details.
 * - `location`: Allow access to location services when app is in use.
 * - `location-always`: Allow access to location services at all times.
 * - `photos-add`: Allow adding photos to the photo library.
 * - `photos`: Allow full access to the photo library.
 * - `media-library`: Allow access to the media library.
 * - `microphone`: Allow access to audio input.
 * - `motion`: Allow access to motion and fitness data.
 * - `reminders`: Allow access to reminders.
 * - `siri`: Allow use of the app with Siri.
 */
export type AccessRule = 'all' | 'calendar' | 'contacts-limited' | 'contacts' | 'location' | 'location-always' | 'photos-add' | 'photos' | 'media-library' | 'microphone' | 'motion' | 'reminders' | 'siri';
/**
 * Permission state
 *
 * Details:
 *
 * - `yes`: To grant the permission
 * - `no`: To revoke the permission
 * - `unset`: To reset the permission
 * - `limited`: To grant the permission as limited access (Only for photos)
 */
export type PermissionState = 'yes' | 'no' | 'unset' | 'limited';
export type GetPermissionService = 'calendar' | 'camera' | 'contacts' | 'homekit' | 'microphone' | 'photos' | 'reminders' | 'medialibrary' | 'motion' | 'health' | 'siri' | 'speech';
//# sourceMappingURL=permissions.d.ts.map