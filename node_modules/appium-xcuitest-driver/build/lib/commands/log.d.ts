declare namespace _default {
    export { SUPPORTED_LOG_TYPES as supportedLogTypes };
    /**
     *
     * @param {XCUITestDriverLogTypes} logType
     * @param {Partial<Record<XCUITestDriverLogTypes,{getLogs(): Promise<any>}>>} [logsContainer]
     * @this {XCUITestDriver}
     */
    export function extractLogs(this: import("../driver").default, logType: string, logsContainer?: Partial<Record<string, {
        getLogs(): Promise<any>;
    }>> | undefined): Promise<any>;
    /**
     * @this {XCUITestDriver}
     */
    export function startLogCapture(this: import("../driver").default): Promise<boolean>;
    /**
     * Starts iOS system logs broadcast websocket on the same host and port
     * where Appium server is running at `/ws/session/:sessionId:/appium/syslog` endpoint. The method
     * will return immediately if the web socket is already listening.
     *
     * Each connected webcoket listener will receive syslog lines
     * as soon as they are visible to Appium.
     * @this {XCUITestDriver}
     */
    export function mobileStartLogsBroadcast(this: import("../driver").default): Promise<void>;
    /**
     * Stops the previously started syslog broadcasting wesocket server.
     * This method will return immediately if no server is running.
     * @this {XCUITestDriver}
     */
    export function mobileStopLogsBroadcast(this: import("../driver").default): Promise<void>;
}
export default _default;
/**
 * Log entry in the array returned by `getLogs('server')`
 */
export type AppiumServerLogEntry = {
    timestamp: number;
    level: 'ALL';
    message: string;
};
export type XCUITestDriver = import('../driver').XCUITestDriver;
export type XCUITestDriverLogTypes = keyof typeof SUPPORTED_LOG_TYPES;
export type AppiumServer = import('@appium/types').AppiumServer;
/**
 * @type {import('@appium/types').LogDefRecord}
 * @privateRemarks The return types for these getters should be specified
 */
declare const SUPPORTED_LOG_TYPES: import('@appium/types').LogDefRecord;
//# sourceMappingURL=log.d.ts.map