declare namespace _default {
    /**
     * Enrolls biometric authentication on Simulator.
     *
     * @param {boolean} isEnabled - Whether to enable/disable biometric enrollment.
     * @throws {Error} If enrollment fails or the device is not a Simulator.
     * @group Simulatory Only
     * @this {XCUITestDriver}
     */
    function mobileEnrollBiometric(this: import("../driver").default, isEnabled?: boolean): Promise<void>;
    /**
     * Emulates biometric match/non-match event on Simulator.
     * The biometric feature is expected to be already enrolled before executing this.
     *
     * @param {string} type - The biometric feature name.
     * @param {boolean} match - If `true`, simulate biometic match. If `false`, simulate biometric non-match..
     * @throws {Error} If matching fails or the device is not a Simulator.
     * @group Simulator Only
     * @this {XCUITestDriver}
     */
    function mobileSendBiometricMatch(this: import("../driver").default, type?: string, match?: boolean): Promise<void>;
    /**
     * Checks whether biometric is currently enrolled or not.
     *
     * @returns {Promise<boolean>} `true` if biometric is enrolled.
     * @throws {Error} If the detection fails or the device is not a Simulator.
     * @group Simulator Only
     * @this {XCUITestDriver}
     */
    function mobileIsBiometricEnrolled(this: import("../driver").default): Promise<boolean>;
}
export default _default;
export type XCUITestDriver = import('../driver').XCUITestDriver;
//# sourceMappingURL=biometric.d.ts.map