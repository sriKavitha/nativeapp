/**
 * Asserts that IDB is present and that launchWithIDB was used
 *
 * @param {XCUITestDriver['opts']} opts Opts object from the driver instance
 */
export function assertIDB(opts: XCUITestDriver['opts']): any;
/**
 * @typedef {Object} XCTestResult
 *
 * @property {string} testName Name of the test (e.g.: 'XCTesterAppUITests - XCTesterAppUITests.XCTesterAppUITests/testExample')
 * @property {boolean} passed Did the tests pass?
 * @property {boolean} crashed Did the tests crash?
 * @property {string} status Test result status (e.g.: 'passed', 'failed', 'crashed')
 * @property {number} duration How long did the tests take (in seconds)
 * @property {string} [failureMessage] Failure message (if applicable)
 * @property {string} [location] The geolocation of the tests (if applicable)
 */
/**
 * Parse the stdout of XC test log
 * @param {string} stdout A line of standard out from `idb xctest run ...`
 * @returns {XCTestResult[]|string[]} results The final output of the XCTest run
 */
export function parseXCTestStdout(stdout: string): XCTestResult[] | string[];
declare namespace _default {
    /**
     * Run an XCTest.
     *
     * Launches a subprocess that runs the XC Test and blocks until it is complete. Parses the stdout of the process and returns result as an array.
     *
     * See [the idb docs](https://fbidb.io/docs/test-execution/) for reference.
     *
     * @param {string} testRunnerBundleId - Test app bundle (e.g.: `io.appium.XCTesterAppUITests.xctrunner`)
     * @param {string} appUnderTestBundleId - App-under-test bundle
     * @param {string} xcTestBundleId - XCTest bundle ID
     * @param {string[]} args - Launch arguments to start the test with (see [reference documentation](https://developer.apple.com/documentation/xctest/xcuiapplication/1500477-launcharguments))
     * @param {'app'|'ui'|'logic'} testType - XC test type
     * @param {object} [env] - Environment variables passed to test
     * @param {number} timeout - Timeout if session doesn't complete after given time (in milliseconds)
     * @throws {XCUITestError} Error thrown if subprocess returns non-zero exit code
     * @returns {Promise<RunXCUITestResponse>}
     * @this {XCUITestDriver}
     */
    function mobileRunXCTest(this: import("../driver").default, testRunnerBundleId: string, appUnderTestBundleId: string, xcTestBundleId: string, args?: string[], testType?: "app" | "ui" | "logic", env?: any, timeout?: number): Promise<RunXCUITestResponse>;
    /**
     * Install an XCTestBundle
     *
     * @param {string} xctestApp - Path of the XCTest app (URL or filename with extension `.app`)
     * @this {XCUITestDriver}
     */
    function mobileInstallXCTestBundle(this: import("../driver").default, xctestApp: string): Promise<void>;
    /**
     * List XCTest bundles that are installed on device
     *
     * @returns {Promise<string[]>} List of XCTest bundles (e.g.: "XCTesterAppUITests.XCTesterAppUITests/testLaunchPerformance")
     * @this {XCUITestDriver}
     */
    function mobileListXCTestBundles(this: import("../driver").default): Promise<string[]>;
    /**
     * List XCTests in a test bundle
     *
     * @param {string} bundle - Bundle ID of the XCTest
     *
     * @returns {Promise<string[]>} The list of xctests in the test bundle (e.g., `['XCTesterAppUITests.XCTesterAppUITests/testExample', 'XCTesterAppUITests.XCTesterAppUITests/testLaunchPerformance']`)
     * @this {XCUITestDriver}
     */
    function mobileListXCTestsInTestBundle(this: import("../driver").default, bundle: string): Promise<string[]>;
}
export default _default;
export type XCTestResult = {
    /**
     * Name of the test (e.g.: 'XCTesterAppUITests - XCTesterAppUITests.XCTesterAppUITests/testExample')
     */
    testName: string;
    /**
     * Did the tests pass?
     */
    passed: boolean;
    /**
     * Did the tests crash?
     */
    crashed: boolean;
    /**
     * Test result status (e.g.: 'passed', 'failed', 'crashed')
     */
    status: string;
    /**
     * How long did the tests take (in seconds)
     */
    duration: number;
    /**
     * Failure message (if applicable)
     */
    failureMessage?: string | undefined;
    /**
     * The geolocation of the tests (if applicable)
     */
    location?: string | undefined;
};
export type RunXCUITestResponse = {
    /**
     * The results of all the tests with information
     */
    results: XCTestResult[];
    /**
     * The exit code of the process
     */
    code: number;
    /**
     * The signal that terminated the process (or null) (e.g.: SIGTERM)
     */
    signal: string;
    /**
     * Did all the tests pass?
     */
    passed: boolean;
};
export type MobileRunXCTestOptions = {
    /**
     * Test app bundle (e.g.: 'io.appium.XCTesterAppUITests.xctrunner')
     */
    testRunnerBundleId: string;
    /**
     * App-under-test bundle
     */
    appUnderTestBundleId: string;
    /**
     * xctest bundle id
     */
    xcTestBundleID: string;
    /**
     * XC test type. 'app', 'ui', or 'logic'
     */
    testType?: "app" | "ui" | "logic" | undefined;
    /**
     * Environment variables passed to test
     */
    env?: object;
    /**
     * Launch arguments to start the test with (see https://developer.apple.com/documentation/xctest/xcuiapplication/1500477-launcharguments for reference)
     */
    args: string[];
    /**
     * Timeout if session doesn't complete after given time (in milliseconds)
     */
    timeout?: number | undefined;
};
export type XCUITestError = Error;
export type XCUITestDriver = import('../driver').XCUITestDriver;
//# sourceMappingURL=xctest.d.ts.map