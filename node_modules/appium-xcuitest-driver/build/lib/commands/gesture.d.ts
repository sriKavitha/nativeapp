/**
 *
 * @param {any[]} gestures
 * @param {string[]|null} keysToInclude
 * @returns {string}
 */
export function gesturesChainToString(gestures: any[], keysToInclude?: string[] | null): string;
declare namespace _default {
    /**
     * Move the mouse pointer to a particular screen location
     *
     * @param {string|Element} el - the element ID if the move is relative to an element
     * @param {number} xoffset - the x offset
     * @param {number} yoffset - the y offset
     * @this {XCUITestDriver}
     * @deprecated Use {@linkcode XCUITestDriver.performActions} instead
     */
    function moveTo(this: import("../driver").default, el: string | import("@appium/types").Element<string>, xoffset?: number, yoffset?: number): Promise<void>;
    /**
     * Shake the device
     * @this {XCUITestDriver}
     * @group Simulator Only
     */
    function mobileShake(this: import("../driver").default): Promise<void>;
    /**
     * @this {XCUITestDriver}
     */
    function click(this: import("../driver").default, el: any): Promise<any>;
    /**
     * @this {XCUITestDriver}
     */
    function releaseActions(this: import("../driver").default): Promise<void>;
    /**
     * @this {XCUITestDriver}
     */
    function performActions(this: import("../driver").default, actions: any): Promise<any>;
    /**
     * Perform a set of touch actions
     *
     * @param {any[]} gestures - the old MJSONWP style touch action objects
     * @this {XCUITestDriver}
     * @deprecated Use {@linkcode XCUITestDriver.performActions} instead
     */
    function performTouch(this: import("../driver").default, gestures: any[]): Promise<any>;
    /**
     * Perform a set of touch actions
     *
     * @param {any[]} actions - the old MJSONWP style touch action objects
     * @this {XCUITestDriver}
     * @deprecated Use {@linkcode XCUITestDriver.performActions} instead
     * @group Native Only
     */
    function performMultiAction(this: import("../driver").default, actions: any[]): Promise<any>;
    /**
     * @param {import('@appium/types').Element|string} el
     * @this {XCUITestDriver}
     * @group Native Only
     */
    function nativeClick(this: import("../driver").default, el: string | import("@appium/types").Element<string>): Promise<any>;
    /**
     * See https://github.com/facebook/WebDriverAgent/blob/master/WebDriverAgentLib/Commands/FBElementCommands.m
     * to get the info about available WDA gestures API
     *
     * See https://developer.apple.com/reference/xctest/xcuielement and
     * https://developer.apple.com/reference/xctest/xcuicoordinate to get the detailed description of
     * all XCTest gestures
     * @param {Element|string} elementId
     * @this {XCUITestDriver}
     */
    function mobileScrollToElement(this: import("../driver").default, elementId: string | import("@appium/types").Element<string>): Promise<any>;
    /**
     * @param {string} [name]
     * @param {import('./types').Direction} [direction]
     * @param {string} [predicateString]
     * @param {boolean} [toVisible]
     * @param {number} [distance]
     * @param {Element|string} [elementId]
     * @this {XCUITestDriver}
     */
    function mobileScroll(this: import("../driver").default, name?: string | undefined, direction?: import("./types").Direction | undefined, predicateString?: string | undefined, toVisible?: boolean | undefined, distance?: number | undefined, elementId?: string | import("@appium/types").Element<string> | undefined): Promise<any>;
    /**
     * @param {import('./types').Direction} direction
     * @param {number} [velocity]
     * @param {Element|string} [elementId]
     * @this {XCUITestDriver}
     */
    function mobileSwipe(this: import("../driver").default, direction: import("./types").Direction, velocity?: number | undefined, elementId?: string | import("@appium/types").Element<string> | undefined): Promise<any>;
    /**
     * @param {number} scale
     * @param {number} velocity
     * @param {Element|string} [elementId]
     * @this {XCUITestDriver}
     */
    function mobilePinch(this: import("../driver").default, scale: number, velocity: number, elementId?: string | import("@appium/types").Element<string> | undefined): Promise<any>;
    /**
     * @param {Element|string} [elementId]
     * @param {number} [x]
     * @param {number} [y]
     * @this {XCUITestDriver}
     */
    function mobileDoubleTap(this: import("../driver").default, elementId?: string | import("@appium/types").Element<string> | undefined, x?: number | undefined, y?: number | undefined): Promise<any>;
    /**
     * @param {Element|string} [elementId]
     * @this {XCUITestDriver}
     */
    function mobileTwoFingerTap(this: import("../driver").default, elementId?: string | import("@appium/types").Element<string> | undefined): Promise<any>;
    /**
     * @param {number} duration
     * @param {number} [x]
     * @param {number} [y]
     * @param {string|Element} [elementId]
     * @this {XCUITestDriver}
     */
    function mobileTouchAndHold(this: import("../driver").default, duration: number, x?: number | undefined, y?: number | undefined, elementId?: string | import("@appium/types").Element<string> | undefined): Promise<any>;
    /**
     * @param {number} x
     * @param {number} y
     * @param {string|Element} [elementId]
     * @this {XCUITestDriver}
     */
    function mobileTap(this: import("../driver").default, x: number, y: number, elementId?: string | import("@appium/types").Element<string> | undefined): Promise<any>;
    /**
     * @param {number} duration
     * @param {number} fromX
     * @param {number} fromY
     * @param {number} toX
     * @param {number} toY
     * @param {string|Element} [elementId]
     * @this {XCUITestDriver}
     */
    function mobileDragFromToForDuration(this: import("../driver").default, duration: number, fromX: number, fromY: number, toX: number, toY: number, elementId?: string | import("@appium/types").Element<string> | undefined): Promise<any>;
    /**
     * @param {number} pressDuration
     * @param {number} holdDuration
     * @param {number} velocity
     * @param {string|Element} [fromElementId]
     * @param {string|Element} [toElementId]
     * @param {number} [fromX]
     * @param {number} [fromY]
     * @param {number} [toX]
     * @param {number} [toY]
     * @this {XCUITestDriver}
     */
    function mobileDragFromToWithVelocity(this: import("../driver").default, pressDuration: number, holdDuration: number, velocity: number, fromElementId?: string | import("@appium/types").Element<string> | undefined, toElementId?: string | import("@appium/types").Element<string> | undefined, fromX?: number | undefined, fromY?: number | undefined, toX?: number | undefined, toY?: number | undefined): Promise<any>;
    /**
     * @param {string|Element} elementId
     * @param {number} numberOfTaps
     * @param {number} numberOfTouches
     * @this {XCUITestDriver}
     */
    function mobileTapWithNumberOfTaps(this: import("../driver").default, elementId: string | import("@appium/types").Element<string>, numberOfTaps: number, numberOfTouches: number): Promise<any>;
    /**
     * @param {number} x
     * @param {number} y
     * @param {number} duration
     * @param {number} pressure
     * @param {string|Element} [elementId]
     * @this {XCUITestDriver}
     */
    function mobileForcePress(this: import("../driver").default, x: number, y: number, duration: number, pressure: number, elementId?: string | import("@appium/types").Element<string> | undefined): Promise<any>;
    /**
     * Performs selection of the next or previous picker wheel value.
     * This might be useful if these values are populated dynamically (so you
     * don't know which one to select) or if value selection using the `sendKeys` API does
     * not work due to an XCTest bug. The method throws an exception if it
     * fails to change the current picker value.
     * @param {string|Element} elementId - The element id for the picker wheel
     * @param {'next'|'previous'} order - The order in which to select the value. Either `next` or `previous`
     * @param {number} [offset] - The offset from the start of the picker wheel. This is useful if there are multiple picker wheels on the screen
     * @this {XCUITestDriver}
     */
    function mobileSelectPickerWheelValue(this: import("../driver").default, elementId: string | import("@appium/types").Element<string>, order: "next" | "previous", offset?: number | undefined): Promise<any>;
    /**
     * @param {string|Element} elementId
     * @param {number} rotation
     * @param {number} velocity
     * @this {XCUITestDriver}
     */
    function mobileRotateElement(this: import("../driver").default, elementId: string | import("@appium/types").Element<string>, rotation: number, velocity: number): Promise<any>;
    /**
     * @this {XCUITestDriver}
     */
    function getCoordinates(this: import("../driver").default, gesture: any): Promise<{
        x: number;
        y: number;
        areOffsets: boolean;
    }>;
    /**
     * @this {XCUITestDriver}
     */
    function applyMoveToOffset(this: import("../driver").default, firstCoordinates: any, secondCoordinates: any): any;
}
export default _default;
export type XCUITestDriver = import('../driver').XCUITestDriver;
export type Element = import('@appium/types').Element;
//# sourceMappingURL=gesture.d.ts.map