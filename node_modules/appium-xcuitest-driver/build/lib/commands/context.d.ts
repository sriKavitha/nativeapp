declare namespace _default {
    /**
     * @this {XCUITestDriver}
     */
    function getCurrentContext(this: import("../driver").default): Promise<string>;
    /**
     * Set context
     *
     * @param {string|Context} name - The name of context to set. It could be 'null' as NATIVE_WIN.
     * @param {any} [callback] The callback. (It is not called in this method)
     * @param {boolean} skipReadyCheck - Whether it waits for the new context is ready
     * @this {XCUITestDriver}
     */
    function setContext(this: import("../driver").default, name: string | import("./types").Context, callback?: any, skipReadyCheck?: boolean): Promise<void>;
    /**
     * @this {XCUITestDriver}
     * @returns {Promise<string[]|FullContext[]>}
     */
    function getContexts(this: import("../driver").default): Promise<string[] | FullContext[]>;
    /**
     * @this {XCUITestDriver}
     */
    function setWindow(this: import("../driver").default, name: any, skipReadyCheck: any): Promise<void>;
    /**
     * @this {XCUITestDriver}
     */
    function getWindowHandle(this: import("../driver").default): Promise<string>;
    /**
     * @this {XCUITestDriver}
     */
    function getWindowHandles(this: import("../driver").default): Promise<string[]>;
    /**
     * @this {XCUITestDriver}
     */
    function getContextsAndViews(this: import("../driver").default, useUrl?: boolean): Promise<[import("./types").ViewContext<"NATIVE_APP">]>;
    /**
     * Right now we don't necessarily wait for webview
     * and frame to load, which leads to race conditions and flakiness,
     * let's see if we can transition to something better
     * @this {XCUITestDriver}
     */
    function useNewSafari(this: import("../driver").default): any;
    /**
     * @this {XCUITestDriver}
     */
    function activateRecentWebview(this: import("../driver").default): Promise<void>;
    /**
     * @this {XCUITestDriver}
     */
    function listWebFrames(this: import("../driver").default, useUrl?: boolean): Promise<any>;
    /**
     * @this {XCUITestDriver}
     */
    function connectToRemoteDebugger(this: import("../driver").default): Promise<void>;
    /**
     * Get the contexts available, with information about the url and title of each
     * webview
     *
     * @param {number} [waitForWebviewMs] - The period to poll for available webviews (in ms)
     * @returns {Promise<Context[]>} List of Context objects
     * @this {XCUITestDriver}
     */
    function mobileGetContexts(this: import("../driver").default, waitForWebviewMs?: number | undefined): Promise<import("./types").Context[]>;
    /**
     * @param {import('./types').PageChangeNotification} pageChangeNotification
     * @this {XCUITestDriver}
     */
    function onPageChange(this: import("../driver").default, pageChangeNotification: import("./types").PageChangeNotification): Promise<void>;
    /**
     * @this {XCUITestDriver}
     */
    function stopRemote(this: import("../driver").default, closeWindowBeforeDisconnecting?: boolean): Promise<void>;
    /**
     * @this {XCUITestDriver}
     */
    function setCurrentUrl(this: import("../driver").default, url: any): void;
    /**
     * @this {XCUITestDriver}
     */
    function getCurrentUrl(this: import("../driver").default): any;
    /**
     * @param {RegExp} titleRegExp
     * @param {RegExp} urlRegExp
     * @this {XCUITestDriver}
     */
    function getRecentWebviewContextId(this: import("../driver").default, titleRegExp: RegExp, urlRegExp: RegExp): Promise<string | undefined>;
    /**
     * @this {XCUITestDriver}
     */
    function isWebContext(this: import("../driver").default): boolean;
    /**
     * @this {XCUITestDriver}
     */
    function isWebview(this: import("../driver").default): boolean;
    /**
     * @this {XCUITestDriver}
     */
    function getNewRemoteDebugger(this: import("../driver").default): Promise<any>;
}
export default _default;
export type XCUITestDriver = import('../driver').XCUITestDriver;
export type Context = import('./types').Context;
export type FullContext = import('./types').FullContext;
//# sourceMappingURL=context.d.ts.map