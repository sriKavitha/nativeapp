export class PerfRecorder {
    constructor(reportRoot: any, udid: any, opts?: {});
    /** @type {import('teen_process').SubProcess|null} */
    _process: import('teen_process').SubProcess | null;
    _zippedReportPath: string;
    _timeout: any;
    _profileName: any;
    _reportPath: string;
    _pid: any;
    _udid: any;
    _logger: import("@appium/support/node_modules/@appium/types").AppiumLogger;
    _archivePromise: Promise<string> | null;
    get profileName(): any;
    getOriginalReportPath(): Promise<string>;
    getZippedReportPath(): Promise<string>;
    isRunning(): boolean;
    _enforceTermination(): Promise<string>;
    start(): Promise<void>;
    stop(force?: boolean): Promise<string>;
}
declare namespace _default {
    /**
     * Starts performance profiling for the device under test.
     *
     * Relaxing security is mandatory for simulators. It can always work for real devices.
     *
     * Since XCode 14 the method tries to use `xctrace` tool to record performance stats.
     *
     * The `instruments` developer utility is used as a fallback for this purpose if `xctrace` is not available.
     *
     * It is possible to record multiple profiles at the same time.
     *
     * Read [Recording, Pausing, and Stopping Traces](https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/Recording,Pausing,andStoppingTraces.html) for more details.
     *
     * @param {number} timeout - The maximum count of milliseconds to record the profiling information.
     * @param {string} profileName - The name of existing performance profile to apply. Can also contain the full path to the chosen template on the server file system. Note: not all profiles are supported on mobile devices.
     * @param {number|'current'} [pid] -  The ID of the process to measure the performance for. Set it to `current` in order to measure the performance of the process, which belongs to the currently active application.  All processes running on the device are measured if `pid` is unset (the default setting).
     * @this {XCUITestDriver}
     */
    function mobileStartPerfRecord(this: import("../driver").default, timeout?: number, profileName?: string, pid?: number | "current" | undefined): Promise<void>;
    /**
     * Stops performance profiling for the device under test.
     *
     * The resulting file in `.trace` format can be either returned directly as base64-encoded zip archive or uploaded to a remote location (such files can be pretty large). Afterwards it is possible to unarchive and open such files with Xcode Dev Tools.
     *
     * @param {string} [remotePath] - The path to the remote location, where the resulting zipped `.trace` file should be uploaded.  The following protocols are supported: `http`, `https`, `ftp`. Null or empty string value (the default setting) means the content of resulting file should be zipped, encoded as Base64 and passed as the endpoint response value. An exception will be thrown if the generated file is too big to fit into the available process memory.
     * @param {string} [user] - The name of the user for the remote authentication. Only works if `remotePath` is provided.
     * @param {string} [pass] - The password for the remote authentication. Only works if `remotePath` is provided.
     * @param {import('axios').Method} [method] -  The http multipart upload method name. Only works if `remotePath` is provided. Defaults to `PUT`
     * @param {string} profileName - The name of an existing performance profile for which the recording has been made.
     * @param {Record<string,any>} [headers] - Additional headers mapping for multipart http(s) uploads
     * @param {string} [fileFieldName] -  The name of the form field, where the file content BLOB should be stored for http(s) uploads. Defaults to `file`
     * @param {Record<string,any>|([string, any])[]} [formFields] - Additional form fields for multipart http(s) uploads
     *
     * @returns {Promise<string>} Either an empty string if the upload was successful or base-64 encoded
     * content of zipped .trace file.
     * @throws {Error} If no performance recording with given profile name/device udid combination
     * has been started before or the resulting .trace file has not been generated properly.
     * @this {XCUITestDriver}
     */
    function mobileStopPerfRecord(this: import("../driver").default, remotePath?: string | undefined, user?: string | undefined, pass?: string | undefined, method?: import("axios").Method | undefined, profileName?: string, headers?: Record<string, any> | undefined, fileFieldName?: string | undefined, formFields?: [string, any][] | Record<string, any> | undefined): Promise<string>;
}
export default _default;
export type XCUITestDriver = import('../driver').XCUITestDriver;
//# sourceMappingURL=performance.d.ts.map