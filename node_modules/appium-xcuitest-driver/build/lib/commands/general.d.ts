declare namespace _default {
    /**
     * @this {XCUITestDriver}
     */
    function active(this: import("../driver").default): Promise<any>;
    /**
     * Trigger a touch/fingerprint match or match failure
     *
     * @param {boolean} match - whether the match should be a success or failure
     * @this {XCUITestDriver}
     */
    function touchId(this: import("../driver").default, match?: boolean): Promise<void>;
    /**
     * Toggle whether the device is enrolled in the touch ID program
     *
     * @param {boolean} isEnabled - whether to enable or disable the touch ID program
     *
     * @this {XCUITestDriver}
     */
    function toggleEnrollTouchId(this: import("../driver").default, isEnabled?: boolean): Promise<void>;
    /**
     * Get the window size
     * @this {XCUITestDriver}
     * @deprecated Use {@linkcode XCUITestDriver.getWindowRect} instead.
     */
    function getWindowSize(this: import("../driver").default, windowHandle?: string): Promise<any>;
    /**
     * Retrieves the current device's timestamp.
     *
     * @param {string} [format] - The set of format specifiers. Read
     *                          https://momentjs.com/docs/ to get the full list of supported
     *                          datetime format specifiers. The default format is
     *                          `YYYY-MM-DDTHH:mm:ssZ`, which complies to ISO-8601
     * @returns Formatted datetime string or the raw command output if formatting fails
     * @this {XCUITestDriver}
     */
    function getDeviceTime(this: import("../driver").default, format?: string | undefined): Promise<string>;
    /**
     * Retrieves the current device time
     *
     * @param {string} format - See {@linkcode getDeviceTime.format}
     * @returns {Promise<string>} Formatted datetime string or the raw command output if formatting fails
     * @this {XCUITestDriver}
     */
    function mobileGetDeviceTime(this: import("../driver").default, format?: string): Promise<string>;
    /**
     * For W3C
     * @this {XCUITestDriver}
     */
    function getWindowRect(this: import("../driver").default): Promise<{
        width: any;
        height: any;
        x: number;
        y: number;
    }>;
    /**
     * @this {XCUITestDriver}
     */
    function removeApp(this: import("../driver").default, bundleId: any): Promise<boolean>;
    /**
     * Start the session after it has been started.
     *
     * @this {XCUITestDriver}
     * @privateRemarks Does this make sense?
     */
    function launchApp(this: import("../driver").default): Promise<void>;
    /**
     * Stop the session without stopping the session
     * @this {XCUITestDriver}
     * @privateRemarks Does this make sense?
     */
    function closeApp(this: import("../driver").default): Promise<void>;
    /**
     * @this {XCUITestDriver}
     */
    function setUrl(this: import("../driver").default, url: any): Promise<void>;
    /**
     * @this {XCUITestDriver}
     */
    function getViewportRect(this: import("../driver").default): Promise<{
        left: number;
        top: number;
        width: number;
        height: number;
    }>;
    /**
     * memoized in constructor
     * @this {XCUITestDriver}
     */
    function getScreenInfo(this: import("../driver").default): Promise<any>;
    /**
     * @this {XCUITestDriver}
     */
    function getStatusBarHeight(this: import("../driver").default): Promise<any>;
    /**
     * memoized in constructor
     * @this {XCUITestDriver}
     */
    function getDevicePixelRatio(this: import("../driver").default): Promise<any>;
    /**
     * Emulates press the given devive button name.
     *
     * @param {string} name - The name of the button to be pressed.
     * @param {number} [durationSeconds] - The duration of the button press in seconds (float).
     * @this {XCUITestDriver}
     */
    function mobilePressButton(this: import("../driver").default, name: string, durationSeconds?: number | undefined): Promise<any>;
    /**
     * @param {string} text - Text to be sent to Siri
     * @this {XCUITestDriver}
     */
    function mobileSiriCommand(this: import("../driver").default, text: string): Promise<any>;
    /**
     * @this {XCUITestDriver}
     */
    function getWindowSizeWeb(this: import("../driver").default): Promise<any>;
    /**
     * @this {XCUITestDriver}
     */
    function getWindowSizeNative(this: import("../driver").default): Promise<any>;
}
export default _default;
export type PressButtonOptions = {
    /**
     * - The name of the button to be pressed.
     */
    name: string;
    /**
     * - Duration in float seconds.
     */
    durationSeconds?: number | undefined;
};
export type XCUITestDriver = import('../driver').XCUITestDriver;
//# sourceMappingURL=general.d.ts.map