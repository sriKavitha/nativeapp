export default IOSDeploy;
declare class IOSDeploy {
    constructor(udid: any);
    udid: any;
    remove(bundleId: any): Promise<void>;
    removeApp(bundleId: any): Promise<void>;
    /**
     *
     * @param {string} app
     * @param {number} [timeout]
     * @param {'ios-deploy'|'serial'|'parallel'|null} strategy
     * @privateRemarks This really needs type guards built out
     */
    install(app: string, timeout?: number | undefined, strategy?: 'ios-deploy' | 'serial' | 'parallel' | null): Promise<void>;
    installOrUpgradeApplication(bundlePathOnPhone: any, isUpgrade?: boolean): Promise<void>;
    /**
     * Alias for {@linkcode install}
     * @param {string} app
     * @param {number} timeout
     * @param {'ios-deploy'|'serial'|'parallel'|null} strategy
     */
    installApp(app: string, timeout: number, strategy: 'ios-deploy' | 'serial' | 'parallel' | null): Promise<void>;
    /**
     * Return an application object if test app has 'bundleid'.
     * The target bundleid can be User and System apps.
     * @param {string} bundleId The bundleId to ensure it is installed
     * @return {Promise<boolean>} Returns True if the bundleid exists in the result of 'listApplications' like:
     * { "com.apple.Preferences":{
     *   "UIRequiredDeviceCapabilities":["arm64"],
     *   "UIRequiresFullScreen":true,
     *   "CFBundleInfoDictionaryVersion":"6.0",
     *   "Entitlements":
     *     {"com.apple.frontboard.delete-application-snapshots":true,..
     */
    isAppInstalled(bundleId: string): Promise<boolean>;
    fetchAppInfo(bundleId: any): Promise<any>;
    terminateApp(bundleId: any): Promise<boolean>;
    /**
     * @param {string} bundleName The name of CFBundleName in Info.plist
     *
     * @returns {Promise<string[]>} A list of User level apps' bundle ids which has
     *                          'CFBundleName' attribute as 'bundleName'.
     */
    getUserInstalledBundleIdsByBundleName(bundleName: string): Promise<string[]>;
    getPlatformVersion(): Promise<any>;
}
//# sourceMappingURL=ios-deploy.d.ts.map