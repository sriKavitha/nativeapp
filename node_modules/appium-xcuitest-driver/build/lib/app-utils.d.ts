export type PlatformOpts = {
    /**
     * - Whether the destination platform is a Simulator
     */
    isSimulator: boolean;
    /**
     * - Whether the destination platform is a Simulator
     */
    isTvOS: boolean;
};
export function extractBundleId(app: any): Promise<any>;
/**
 * @typedef {Object} PlatformOpts
 *
 * @property {boolean} isSimulator - Whether the destination platform is a Simulator
 * @property {boolean} isTvOS - Whether the destination platform is a Simulator
 */
/**
 * Verify whether the given application is compatible to the
 * platform where it is going to be installed and tested.
 *
 * @param {string} app - The actual path to the application bundle
 * @param {PlatformOpts} expectedPlatform
 * @throws {Error} If bundle architecture does not match the expected device architecture.
 */
export function verifyApplicationPlatform(app: string, expectedPlatform: PlatformOpts): Promise<void>;
export function parseLocalizableStrings(opts: any): Promise<{}>;
export const SAFARI_BUNDLE_ID: "com.apple.mobilesafari";
export function fetchSupportedAppPlatforms(app: any): Promise<any[]>;
export const APP_EXT: ".app";
export const IPA_EXT: ".ipa";
/**
 * Check whether the given path on the file system points to the .app bundle root
 *
 * @param {string} appPath Possible .app bundle root
 * @returns {Promise<boolean>} Whether the given path points to an .app bundle
 */
export function isAppBundle(appPath: string): Promise<boolean>;
/**
 * Extract the given archive and looks for items with given extensions in it
 *
 * @param {string} archivePath Full path to a .zip archive
 * @param {Array<string>} appExtensions List of matching item extensions
 * @returns {Promise<[string, string[]]>} Tuple, where the first element points to
 * a temporary folder root where the archive has been extracted and the second item
 * contains a list of relative paths to matched items
 */
export function findApps(archivePath: string, appExtensions: Array<string>): Promise<[string, string[]]>;
/**
 * Moves the application bundle to a newly created temporary folder
 *
 * @param {string} appRoot Full path to the .app bundle
 * @returns {Promise<string>} The new path to the app bundle.
 * The name of the app bundle remains though
 */
export function isolateAppBundle(appRoot: string): Promise<string>;
export function extractBundleVersion(app: any): Promise<any>;
//# sourceMappingURL=app-utils.d.ts.map